{{!-- Load Balancer Resources for HA Cluster --}}
{{!-- Provides load balancer with health probes and backend pools --}}

{{#if haConfig.loadBalancer.createPublicIP}}
{
  "type": "Microsoft.Network/publicIPAddresses",
  "apiVersion": "2023-09-01",
  "name": "[concat(variables('haLoadBalancerName'), '-pip')]",
  "location": "[parameters('location')]",
  "sku": {
    "name": "{{default haConfig.loadBalancer.sku 'Standard'}}"
  },
  "properties": {
    "publicIPAllocationMethod": "Static",
    "publicIPAddressVersion": "IPv4",
    {{#if haConfig.loadBalancer.dnsLabelPrefix}}
    "dnsSettings": {
      "domainNameLabel": "{{haConfig.loadBalancer.dnsLabelPrefix}}"
    },
    {{/if}}
    "idleTimeoutInMinutes": {{default haConfig.loadBalancer.idleTimeoutInMinutes 4}}
  },
  "zones": {{#if haConfig.loadBalancer.zones}}[{{#each haConfig.loadBalancer.zones}}"{{this}}"{{#unless @last}},{{/unless}}{{/each}}]{{else}}["1", "2", "3"]{{/if}},
  "metadata": {
    "description": "Public IP for HA Load Balancer frontend"
  }
},
{{/if}}
{
  "type": "Microsoft.Network/loadBalancers",
  "apiVersion": "2023-09-01",
  "name": "[variables('haLoadBalancerName')]",
  "location": "[parameters('location')]",
  "sku": {
    "name": "{{default haConfig.loadBalancer.sku 'Standard'}}",
    "tier": "Regional"
  },
  {{#if haConfig.loadBalancer.createPublicIP}}
  "dependsOn": [
    "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('haLoadBalancerName'), '-pip'))]"
  ],
  {{/if}}
  "properties": {
    "frontendIPConfigurations": [
      {
        "name": "LoadBalancerFrontEnd",
        "properties": {
          {{#if haConfig.loadBalancer.createPublicIP}}
          "publicIPAddress": {
            "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('haLoadBalancerName'), '-pip'))]"
          }
          {{else}}
          "subnet": {
            "id": "[variables('subnetRef')]"
          },
          "privateIPAllocationMethod": "Dynamic"
          {{/if}}
        }
      }
    ],
    "backendAddressPools": [
      {
        "name": "[variables('haBackendPoolName')]",
        "properties": {}
      }
    ],
    "loadBalancingRules": [
      {{#each haConfig.loadBalancer.loadBalancingRules}}
      {
        "name": "{{name}}",
        "properties": {
          "frontendIPConfiguration": {
            "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('haLoadBalancerName')), '/frontendIPConfigurations/LoadBalancerFrontEnd')]"
          },
          "backendAddressPool": {
            "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('haLoadBalancerName')), '/backendAddressPools/', variables('haBackendPoolName'))]"
          },
          "probe": {
            "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('haLoadBalancerName')), '/probes/{{probeName}}')]"
          },
          "protocol": "{{protocol}}",
          "frontendPort": {{frontendPort}},
          "backendPort": {{backendPort}},
          "enableFloatingIP": {{default enableFloatingIP false}},
          "idleTimeoutInMinutes": {{default idleTimeoutInMinutes 4}},
          "loadDistribution": "{{default loadDistribution 'Default'}}"
        }
      }{{#unless @last}},{{/unless}}
      {{/each}}
    ],
    "probes": [
      {{#each haConfig.loadBalancer.healthProbes}}
      {
        "name": "{{name}}",
        "properties": {
          "protocol": "{{protocol}}",
          "port": {{port}},
          {{#if requestPath}}
          "requestPath": "{{requestPath}}",
          {{/if}}
          "intervalInSeconds": {{default intervalInSeconds 15}},
          "numberOfProbes": {{default numberOfProbes 2}},
          "probeThreshold": {{default probeThreshold 1}}
        }
      }{{#unless @last}},{{/unless}}
      {{/each}}
    ]{{#if haConfig.loadBalancer.inboundNatRules}},
    "inboundNatRules": [
      {{#each haConfig.loadBalancer.inboundNatRules}}
      {
        "name": "{{name}}",
        "properties": {
          "frontendIPConfiguration": {
            "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('haLoadBalancerName')), '/frontendIPConfigurations/LoadBalancerFrontEnd')]"
          },
          "protocol": "{{protocol}}",
          "frontendPort": {{frontendPort}},
          "backendPort": {{backendPort}},
          "enableFloatingIP": {{default enableFloatingIP false}},
          "idleTimeoutInMinutes": {{default idleTimeoutInMinutes 4}}
        }
      }{{#unless @last}},{{/unless}}
      {{/each}}
    ]{{/if}}{{#if haConfig.loadBalancer.outboundRules}},
    "outboundRules": [
      {{#each haConfig.loadBalancer.outboundRules}}
      {
        "name": "{{name}}",
        "properties": {
          "frontendIPConfigurations": [
            {
              "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('haLoadBalancerName')), '/frontendIPConfigurations/LoadBalancerFrontEnd')]"
            }
          ],
          "backendAddressPool": {
            "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('haLoadBalancerName')), '/backendAddressPools/', variables('haBackendPoolName'))]"
          },
          "protocol": "{{protocol}}",
          "allocatedOutboundPorts": {{default allocatedOutboundPorts 1024}},
          "idleTimeoutInMinutes": {{default idleTimeoutInMinutes 4}}
        }
      }{{#unless @last}},{{/unless}}
      {{/each}}
    ]{{/if}}
  },
  "metadata": {
    "description": "HA Load Balancer for distributing traffic across VMSS instances"
  },
  "tags": {
    "purpose": "HighAvailability",
    "component": "LoadBalancer",
    "cluster": "[variables('haVmssName')]",
    "version": "1.11.0"
  }
}