{{!-- VMSS Resources for HA Cluster --}}
{{!-- Provides VMSS with HA configuration, health extensions, and load balancer integration --}}

{
  "type": "Microsoft.Compute/virtualMachineScaleSets",
  "apiVersion": "2023-09-01",
  "name": "[variables('haVmssName')]",
  "location": "[parameters('location')]",
  "dependsOn": [
    {{#if haConfig.proximityPlacementGroup.enabled}}
    "[resourceId('Microsoft.Compute/proximityPlacementGroups', variables('proximityPlacementGroupName'))]",
    {{/if}}
    {{#if haConfig.loadBalancer.enabled}}
    "[resourceId('Microsoft.Network/loadBalancers', variables('haLoadBalancerName'))]",
    {{/if}}
    "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"{{#if haConfig.healthMonitoring.healthReporting.enabled}},
    "[resourceId('Microsoft.Storage/storageAccounts', variables('diagnosticsStorageAccountName'))]"{{/if}}
  ],
  "sku": {
    "name": "[parameters('vmSize')]",
    "tier": "Standard",
    "capacity": "[parameters('haVmssInstanceCount')]"
  },
  {{#if haConfig.vmss.zones}}
  "zones": [{{#each haConfig.vmss.zones}}"{{this}}"{{#unless @last}},{{/unless}}{{/each}}],
  {{else}}
  "zones": ["1", "2", "3"],
  {{/if}}
  "properties": {
    {{#if haConfig.proximityPlacementGroup.enabled}}
    "proximityPlacementGroup": {
      "id": "[resourceId('Microsoft.Compute/proximityPlacementGroups', variables('proximityPlacementGroupName'))]"
    },
    {{/if}}
    "singlePlacementGroup": {{default haConfig.vmss.singlePlacementGroup false}},
    "orchestrationMode": "{{default haConfig.vmss.orchestrationMode 'Uniform'}}",
    "upgradePolicy": {
      "mode": "{{default haConfig.vmss.upgradePolicy.mode 'Rolling'}}",
      {{#if (eq haConfig.vmss.upgradePolicy.mode "Rolling")}}
      "rollingUpgradePolicy": {
        "maxBatchInstancePercent": {{default haConfig.vmss.upgradePolicy.maxBatchInstancePercent 20}},
        "maxUnhealthyInstancePercent": {{default haConfig.vmss.upgradePolicy.maxUnhealthyInstancePercent 20}},
        "maxUnhealthyUpgradedInstancePercent": {{default haConfig.vmss.upgradePolicy.maxUnhealthyUpgradedInstancePercent 5}},
        "pauseTimeBetweenBatches": "{{default haConfig.vmss.upgradePolicy.pauseTimeBetweenBatches 'PT0S'}}",
        "enableCrossZoneUpgrade": {{default haConfig.vmss.upgradePolicy.enableCrossZoneUpgrade true}},
        "prioritizeUnhealthyInstances": {{default haConfig.vmss.upgradePolicy.prioritizeUnhealthyInstances false}}
      },
      {{/if}}
      {{#if haConfig.vmss.upgradePolicy.automaticOSUpgradePolicy}}
      "automaticOSUpgradePolicy": {
        "enableAutomaticOSUpgrade": {{default haConfig.vmss.upgradePolicy.automaticOSUpgradePolicy.enableAutomaticOSUpgrade false}},
        "disableAutomaticRollback": {{default haConfig.vmss.upgradePolicy.automaticOSUpgradePolicy.disableAutomaticRollback false}},
        "useRollingUpgradePolicy": {{default haConfig.vmss.upgradePolicy.automaticOSUpgradePolicy.useRollingUpgradePolicy true}}
      },
      {{/if}}
    },
    {{#if haConfig.vmss.platformFaultDomainCount}}
    "platformFaultDomainCount": {{haConfig.vmss.platformFaultDomainCount}},
    {{/if}}
    {{#if haConfig.vmss.zoneBalance}}
    "zoneBalance": {{haConfig.vmss.zoneBalance}},
    {{/if}}
    {{#if haConfig.healthMonitoring.automaticRepairPolicy.enabled}}
    "automaticRepairsPolicy": {
      "enabled": true,
      "gracePeriod": "{{default haConfig.healthMonitoring.automaticRepairPolicy.gracePeriod 'PT30M'}}",
      "maxInstanceRepairs": {{default haConfig.healthMonitoring.automaticRepairPolicy.maxInstanceRepairs 3}},
      "repairAction": "{{default haConfig.healthMonitoring.automaticRepairPolicy.repairAction 'Replace'}}"
    },
    {{/if}}
    "virtualMachineProfile": {
      "osProfile": {
        "computerNamePrefix": "[take(variables('haVmssName'), 9)]",
        "adminUsername": "[parameters('adminUsername')]",
        {{#if osProfile.isLinux}}
        "linuxConfiguration": {
          "disablePasswordAuthentication": "[equals(parameters('authenticationType'), 'sshPublicKey')]",
          {{#if (eq authenticationType "sshPublicKey")}}
          "ssh": {
            "publicKeys": [
              {
                "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                "keyData": "[parameters('adminPasswordOrKey')]"
              }
            ]
          },
          {{/if}}
          "provisionVMAgent": true,
          "patchSettings": {
            "patchMode": "{{default haConfig.vmss.patchSettings.patchMode 'ImageDefault'}}",
            "automaticByPlatformSettings": {
              "rebootSetting": "{{default haConfig.vmss.patchSettings.rebootSetting 'IfRequired'}}"
            }
          }
        }{{#unless (eq authenticationType "sshPublicKey")}},
        "adminPassword": "[parameters('adminPasswordOrKey')]"{{/unless}}
        {{else}}
        "adminPassword": "[parameters('adminPasswordOrKey')]",
        "windowsConfiguration": {
          "provisionVMAgent": true,
          "enableAutomaticUpdates": {{default haConfig.vmss.enableAutomaticUpdates true}},
          "patchSettings": {
            "patchMode": "{{default haConfig.vmss.patchSettings.patchMode 'AutomaticByOS'}}",
            "enableHotpatching": {{default haConfig.vmss.patchSettings.enableHotpatching false}},
            "automaticByPlatformSettings": {
              "rebootSetting": "{{default haConfig.vmss.patchSettings.rebootSetting 'IfRequired'}}"
            }
          }
        }
        {{/if}}
      },
      "storageProfile": {
        "imageReference": "[parameters('osImageReference')]",
        "osDisk": {
          "createOption": "FromImage",
          "caching": "ReadWrite",
          "managedDisk": {
            "storageAccountType": "[parameters('storageAccountType')]"
          }{{#if haConfig.vmss.osDisk.diskEncryptionSet}},
          "diskEncryptionSet": {
            "id": "{{haConfig.vmss.osDisk.diskEncryptionSet}}"
          }{{/if}}{{#if haConfig.vmss.osDisk.diffDiskSettings}},
          "diffDiskSettings": {
            "option": "{{haConfig.vmss.osDisk.diffDiskSettings.option}}",
            "placement": "{{haConfig.vmss.osDisk.diffDiskSettings.placement}}"
          }{{/if}}
        }{{#if haConfig.vmss.dataDisks}},
        "dataDisks": [
          {{#each haConfig.vmss.dataDisks}}
          {
            "lun": {{lun}},
            "createOption": "{{createOption}}",
            "diskSizeGB": {{diskSizeGB}},
            "managedDisk": {
              "storageAccountType": "{{storageAccountType}}"
            },
            "caching": "{{default caching 'ReadWrite'}}"{{#if diskEncryptionSet}},
            "diskEncryptionSet": {
              "id": "{{diskEncryptionSet}}"
            }{{/if}}
          }{{#unless @last}},{{/unless}}
          {{/each}}
        ]{{/if}}
      },
      "networkProfile": {
        "networkInterfaceConfigurations": [
          {
            "name": "[concat(variables('haVmssName'), '-nic')]",
            "properties": {
              "primary": true,
              {{#if haConfig.vmss.enableAcceleratedNetworking}}
              "enableAcceleratedNetworking": {{haConfig.vmss.enableAcceleratedNetworking}},
              {{/if}}
              {{#if haConfig.vmss.enableIPForwarding}}
              "enableIPForwarding": {{haConfig.vmss.enableIPForwarding}},
              {{/if}}
              "ipConfigurations": [
                {
                  "name": "[concat(variables('haVmssName'), '-ipconfig')]",
                  "properties": {
                    "subnet": {
                      "id": "[variables('subnetRef')]"
                    }{{#if haConfig.loadBalancer.enabled}},
                    "loadBalancerBackendAddressPools": [
                      {
                        "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('haLoadBalancerName')), '/backendAddressPools/', variables('haBackendPoolName'))]"
                      }
                    ]{{/if}}{{#if haConfig.loadBalancer.inboundNatRules}},
                    "loadBalancerInboundNatPools": [
                      {{#each haConfig.loadBalancer.inboundNatRules}}
                      {
                        "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('haLoadBalancerName')), '/inboundNatPools/{{name}}')]"
                      }{{#unless @last}},{{/unless}}
                      {{/each}}
                    ]{{/if}}{{#if haConfig.vmss.publicIPConfiguration}},
                    "publicIPAddressConfiguration": {
                      "name": "{{haConfig.vmss.publicIPConfiguration.name}}",
                      "properties": {
                        "idleTimeoutInMinutes": {{default haConfig.vmss.publicIPConfiguration.idleTimeoutInMinutes 15}},
                        {{#if haConfig.vmss.publicIPConfiguration.dnsSettings}}
                        "dnsSettings": {
                          "domainNameLabel": "{{haConfig.vmss.publicIPConfiguration.dnsSettings.domainNameLabel}}"
                        },
                        {{/if}}
                        "publicIPPrefix": {
                          "id": "{{haConfig.vmss.publicIPConfiguration.publicIPPrefix}}"
                        }
                      }
                    }{{/if}}
                  }
                }
              ]{{#if haConfig.vmss.networkSecurityGroup}},
              "networkSecurityGroup": {
                "id": "{{haConfig.vmss.networkSecurityGroup}}"
              }{{/if}}
            }
          }
        ]
      }{{#if haConfig.healthMonitoring.enabled}},
      "extensionProfile": {
        "extensions": [
          {{> partials/ha/health-extensions}}
        ]
      }{{/if}}{{#if haConfig.vmss.securityProfile}},
      "securityProfile": {
        {{#if haConfig.vmss.securityProfile.securityType}}
        "securityType": "{{haConfig.vmss.securityProfile.securityType}}",
        {{/if}}
        {{#if haConfig.vmss.securityProfile.encryptionAtHost}}
        "encryptionAtHost": {{haConfig.vmss.securityProfile.encryptionAtHost}},
        {{/if}}
        {{#if haConfig.vmss.securityProfile.uefiSettings}}
        "uefiSettings": {
          "secureBootEnabled": {{default haConfig.vmss.securityProfile.uefiSettings.secureBootEnabled true}},
          "vTpmEnabled": {{default haConfig.vmss.securityProfile.uefiSettings.vTpmEnabled true}}
        }{{/if}}
      }{{/if}}{{#if haConfig.vmss.diagnosticsProfile}},
      "diagnosticsProfile": {
        "bootDiagnostics": {
          "enabled": {{default haConfig.vmss.diagnosticsProfile.bootDiagnostics.enabled true}}{{#if haConfig.vmss.diagnosticsProfile.bootDiagnostics.storageUri}},
          "storageUri": "{{haConfig.vmss.diagnosticsProfile.bootDiagnostics.storageUri}}"{{/if}}
        }
      }{{/if}}{{#if haConfig.vmss.priority}},
      "priority": "{{haConfig.vmss.priority}}",
      {{#if (eq haConfig.vmss.priority "Spot")}}
      "evictionPolicy": "{{default haConfig.vmss.evictionPolicy 'Deallocate'}}",
      "billingProfile": {
        "maxPrice": {{default haConfig.vmss.billingProfile.maxPrice -1}}
      },
      {{/if}}
      {{/if}}
    }{{#if haConfig.vmss.scaleInPolicy}},
    "scaleInPolicy": {
      "rules": [{{#each haConfig.vmss.scaleInPolicy.rules}}"{{this}}"{{#unless @last}},{{/unless}}{{/each}}],
      "forceDeletion": {{default haConfig.vmss.scaleInPolicy.forceDeletion false}}
    }{{/if}}{{#if haConfig.vmss.additionalCapabilities}},
    "additionalCapabilities": {
      "ultraSSDEnabled": {{default haConfig.vmss.additionalCapabilities.ultraSSDEnabled false}},
      "hibernationEnabled": {{default haConfig.vmss.additionalCapabilities.hibernationEnabled false}}
    }{{/if}}
  },
  "identity": {
    "type": "{{default haConfig.vmss.identity.type 'SystemAssigned'}}"{{#if haConfig.vmss.identity.userAssignedIdentities}},
    "userAssignedIdentities": {
      {{#each haConfig.vmss.identity.userAssignedIdentities}}
      "{{this}}": {}{{#unless @last}},{{/unless}}
      {{/each}}
    }{{/if}}
  },
  "metadata": {
    "description": "HA Virtual Machine Scale Set with health monitoring and automatic repairs"
  },
  "tags": {
    "purpose": "HighAvailability",
    "component": "VMSS",
    "cluster": "[variables('haVmssName')]",
    "version": "1.11.0"
  }
}