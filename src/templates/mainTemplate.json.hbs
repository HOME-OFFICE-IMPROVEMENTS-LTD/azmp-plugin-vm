{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "azmp-plugin-vm",
      "version": "2.0.0"
    },
    "description": "{{description}}",
    "author": "{{author}}"{{#if haConfig}},
    "highAvailability": {
      "enabled": true,
      "components": [
        {{#if haConfig.proximityPlacementGroup.enabled}}"ProximityPlacementGroup"{{/if}}{{#if haConfig.loadBalancer.enabled}},{{/if}}
        {{#if haConfig.loadBalancer.enabled}}"LoadBalancer"{{/if}}{{#if haConfig.vmss.enabled}},{{/if}}
        {{#if haConfig.vmss.enabled}}"VirtualMachineScaleSet"{{/if}}{{#if haConfig.healthMonitoring.enabled}},{{/if}}
        {{#if haConfig.healthMonitoring.enabled}}"HealthExtensions"{{/if}}
      ]
    }{{/if}}
  },
  "parameters": {
    "vmName": {
      "type": "string",
      "defaultValue": "{{vmName}}",
      "metadata": {
        "description": "Name of the virtual machine"
      }
    },
    "adminUsername": {
      "type": "string", 
      "defaultValue": "{{adminUsername}}",
      "metadata": {
        "description": "Administrator username for the VM"
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "{{authenticationType}}",
      "allowedValues": [
        "sshPublicKey",
        "password"
      ],
      "metadata": {
        "description": "Type of authentication to use on the Virtual Machine"
      }
    },
    "adminPasswordOrKey": {
      "type": "securestring",
      "metadata": {
        "description": "SSH Key or password for the Virtual Machine"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "{{vmSize}}",
      "metadata": {
        "description": "Size of the virtual machine"
      }
    },
    "dataDiskCount": {
      "type": "int",
      "defaultValue": 0,
      "minValue": 0,
      "maxValue": 32,
      "metadata": {
        "description": "Number of data disks to attach"
      }
    },
    "dataDiskSizeGB": {
      "type": "int", 
      "defaultValue": 128,
      "allowedValues": [32, 64, 128, 256, 512, 1024, 2048, 4096],
      "metadata": {
        "description": "Size of each data disk in GB"
      }
    },
    "dataDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": ["Standard_LRS", "StandardSSD_LRS", "Premium_LRS", "UltraSSD_LRS"],
      "metadata": {
        "description": "Storage account type for data disks"
      }
    },
    "dataDiskCaching": {
      "type": "string",
      "defaultValue": "ReadOnly",
      "allowedValues": ["None", "ReadOnly", "ReadWrite"],
      "metadata": {
        "description": "Caching strategy for data disks"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "defaultValue": "[concat(parameters('vmName'), '-vnet')]",
      "metadata": {
        "description": "Name of the virtual network"
      }
    },
    "virtualNetworkNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": ["new", "existing"],
      "metadata": {
        "description": "Whether to create new or use existing virtual network"
      }
    },
    "virtualNetworkResourceGroup": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Resource group of the virtual network"
      }
    },
    "virtualNetworkAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16", 
      "metadata": {
        "description": "Address prefix for the virtual network"
      }
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "default",
      "metadata": {
        "description": "Name of the subnet"
      }
    },
    "subnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/24",
      "metadata": {
        "description": "Address prefix for the subnet"
      }
    },
    "publicIPAddressName": {
      "type": "string",
      "defaultValue": "[concat(parameters('vmName'), '-pip')]",
      "metadata": {
        "description": "Name of the public IP address"
      }
    },
    "publicIPAddressNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": ["new", "existing", "none"],
      "metadata": {
        "description": "Whether to create new, use existing, or no public IP"
      }
    },
    "publicIPAddressResourceGroup": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Resource group of the public IP address"
      }
    },
    "domainNameLabel": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "DNS name label for the public IP"
      }
    },
    "allowSshRdp": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Allow SSH/RDP from specific source"
      }
    },
    "sshRdpSourceAddressPrefix": {
      "type": "string",
      "defaultValue": "*",
      "metadata": {
        "description": "Source address prefix for SSH/RDP access"
      }
    },
    "installMonitoring": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Install monitoring extensions"
      }
    },
    "workspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Log Analytics workspace ID for monitoring"
      }
    },
    "installSecurity": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Install security extensions"
      }
    },
    "enableVulnerabilityAssessment": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable vulnerability assessment"
      }
    },
    "runCustomScript": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Run custom script extension"
      }
    },
    "customScriptUri": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "URI of custom script to run"
      }
    },
    "customScriptArgs": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Arguments for custom script"
      }
    },
    "createVmss": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Create VM Scale Set"
      }
    },
    "vmssName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the VM Scale Set"
      }
    },
    "vmssInstanceCount": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 1,
      "maxValue": 1000,
      "metadata": {
        "description": "Number of VM instances in the scale set"
      }
    },
    "enableAutoScale": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable auto-scaling for VMSS"
      }
    },
    "autoScaleMinInstances": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Minimum instances for auto-scaling"
      }
    },
    "autoScaleMaxInstances": {
      "type": "int",
      "defaultValue": 10,
      "metadata": {
        "description": "Maximum instances for auto-scaling"
      }
    },
    "cpuThresholdScaleOut": {
      "type": "int",
      "defaultValue": 75,
      "metadata": {
        "description": "CPU threshold for scaling out"
      }
    },
    "cpuThresholdScaleIn": {
      "type": "int",
      "defaultValue": 25,
      "metadata": {
        "description": "CPU threshold for scaling in"
      }
    },
    "createLoadBalancer": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Create load balancer for VMSS"
      }
    },
    "loadBalancerSku": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": ["Basic", "Standard"],
      "metadata": {
        "description": "Load balancer SKU"
      }
    },
    "enableMultiRegion": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable multi-region deployment"
      }
    },
    "secondaryRegion": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Secondary region for multi-region deployment"
      }
    },
    "availabilityOption": {
      "type": "string",
      "defaultValue": "none",
      "allowedValues": ["none", "availabilitySet", "availabilityZone"],
      "metadata": {
        "description": "Availability option for the VM"
      }
    },
    "availabilitySetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the availability set"
      }
    },
    "availabilityZone": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Availability zone for the VM"
      }
    },
    "enableBackup": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable backup for the VM"
      }
    },
    "backupPolicyType": {
      "type": "string",
      "defaultValue": "standard",
      "allowedValues": ["standard", "enhanced"],
      "metadata": {
        "description": "Backup policy type"
      }
    },
    "backupVaultName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the backup vault"
      }
    },
    "enableSnapshots": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable disk snapshots"
      }
    },
    "snapshotFrequency": {
      "type": "string",
      "defaultValue": "daily",
      "allowedValues": ["daily", "weekly"],
      "metadata": {
        "description": "Frequency of snapshots"
      }
    },
    "snapshotRetention": {
      "type": "int",
      "defaultValue": 30,
      "metadata": {
        "description": "Snapshot retention in days"
      }
    },
    "enableMonitoring": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable monitoring and alerts"
      }
    },
    "monitoringEmail": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Email address for monitoring alerts"
      }
    },
    "monitoringPreset": {
      "type": "string",
      "defaultValue": "Production",
      "allowedValues": ["Development", "Production", "Custom"],
      "metadata": {
        "description": "Monitoring preset configuration"
      }
    },
    "enableCpuAlert": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable CPU utilization alerts"
      }
    },
    "enableMemoryAlert": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable memory utilization alerts"
      }
    },
    "enableDiskAlert": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable disk utilization alerts"
      }
    },
    "enableNetworkAlert": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable network utilization alerts"
      }
    },
    "alertSeverity": {
      "type": "string",
      "defaultValue": "Warning",
      "allowedValues": ["Critical", "Error", "Warning", "Informational"],
      "metadata": {
        "description": "Alert severity level"
      }
    },
    "enableAutoShutdown": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable auto-shutdown for the VM"
      }
    },
    "shutdownTime": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Time for auto-shutdown (HH:MM format)"
      }
    },
    "shutdownTimezone": {
      "type": "string",
      "defaultValue": "UTC",
      "metadata": {
        "description": "Timezone for auto-shutdown"
      }
    },
    {{#if osImageReference}}
    "osImageReference": {
      "type": "object",
      "defaultValue": {{{osImageReference}}},
      "metadata": {
        "description": "OS Image reference for the virtual machine"
      }
    },
    {{/if}}
    {{#if storageAccountType}}
    "storageAccountType": {
      "type": "string",
      "defaultValue": "{{storageAccountType}}",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS",
        "Premium_LRS",
        "Premium_ZRS",
        "StandardSSD_LRS",
        "StandardSSD_ZRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "Storage account type for OS disk"
      }
    },
    {{/if}}
    {{#if vnetAddressSpace}}
    "vnetAddressSpace": {
      "type": "string",
      "defaultValue": "{{vnetAddressSpace}}",
      "metadata": {
        "description": "Address space for the virtual network"
      }
    },
    {{/if}}
    {{#if subnetAddressPrefix}}
    "subnetAddressPrefix": {
      "type": "string", 
      "defaultValue": "{{subnetAddressPrefix}}",
      "metadata": {
        "description": "Address prefix for the subnet"
      }
    },
    {{/if}}
    {{#if loadBalancerSku}}
    "loadBalancerSku": {
      "type": "string",
      "defaultValue": "{{loadBalancerSku}}",
      "allowedValues": [
        "Basic",
        "Standard"
      ],
      "metadata": {
        "description": "SKU for the load balancer"
      }
    },
    {{/if}}
    {{#if applicationGatewayTier}}
    "applicationGatewayTier": {
      "type": "string",
      "defaultValue": "{{applicationGatewayTier}}",
      "allowedValues": [
        "Standard_v2",
        "WAF_v2"
      ],
      "metadata": {
        "description": "Tier for the application gateway"
      }
    },
    {{/if}}
    "createLoadBalancer": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to create a load balancer"
      }
    },
    "createApplicationGateway": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to create an application gateway"
      }
    },
    "createBastion": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to create Azure Bastion"
      }
    },
    "bastionSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.1.0/27",
      "metadata": {
        "description": "Address prefix for the Azure Bastion subnet"
      }
    },
    "loadBalancingProtocol": {
      "type": "string",
      "defaultValue": "Tcp",
      "allowedValues": [
        "Tcp",
        "Udp"
      ],
      "metadata": {
        "description": "Load balancing rule protocol"
      }
    },
    "loadBalancingFrontendPort": {
      "type": "int",
      "defaultValue": 80,
      "metadata": {
        "description": "Load balancing rule frontend port"
      }
    },
    "loadBalancingBackendPort": {
      "type": "int",
      "defaultValue": 80,
      "metadata": {
        "description": "Load balancing rule backend port"
      }
    },
    "healthProbeProtocol": {
      "type": "string",
      "defaultValue": "Http",
      "allowedValues": [
        "Http",
        "Https",
        "Tcp"
      ],
      "metadata": {
        "description": "Health probe protocol"
      }
    },
    "healthProbePort": {
      "type": "int",
      "defaultValue": 80,
      "metadata": {
        "description": "Health probe port"
      }
    },
    "healthProbeInterval": {
      "type": "int",
      "defaultValue": 15,
      "metadata": {
        "description": "Health probe interval in seconds"
      }
    },
    "healthProbeRetries": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Health probe number of retries"
      }
    },
    "applicationGatewaySize": {
      "type": "string",
      "defaultValue": "Standard_Small",
      "allowedValues": [
        "Standard_Small",
        "Standard_Medium",
        "Standard_Large"
      ],
      "metadata": {
        "description": "Application Gateway size"
      }
    },
    "applicationGatewayCapacity": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 1,
      "maxValue": 10,
      "metadata": {
        "description": "Application Gateway instance count"
      }
    },
    "applicationGatewayPort": {
      "type": "int",
      "defaultValue": 80,
      "metadata": {
        "description": "Application Gateway frontend port"
      }
    },
    "applicationGatewayBackendPort": {
      "type": "int",
      "defaultValue": 80,
      "metadata": {
        "description": "Application Gateway backend port"
      }
    },
    "applicationGatewayProtocol": {
      "type": "string",
      "defaultValue": "Http",
      "allowedValues": [
        "Http",
        "Https"
      ],
      "metadata": {
        "description": "Application Gateway protocol"
      }
    },
    "publicIPAllocationMethod": {
      "type": "string",
      "defaultValue": "Dynamic",
      "allowedValues": [
        "Dynamic",
        "Static"
      ],
      "metadata": {
        "description": "Public IP allocation method"
      }
    },
    "publicIPSku": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "Standard"
      ],
      "metadata": {
        "description": "Public IP SKU"
      }
    },
    "dnsLabelPrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "DNS label prefix for the public IP"
      }
    },
    "virtualNetworkAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "Address prefix for the virtual network"
      }
    },
    "installExtensions": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to install VM extensions"
      }
    },
    "installCustomScriptExtension": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to install Custom Script Extension"
      }
    },
    "customScriptUrl": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "URL to the custom script to execute"
      }
    },
    "customScriptCommand": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Command to execute the custom script"
      }
    },
    "installMonitoringExtension": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to install Azure Monitor Agent"
      }
    },
    "workspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Log Analytics Workspace ID for monitoring"
      }
    },
    "workspaceKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Log Analytics Workspace Key for monitoring"
      }
    },
    "installSecurityExtension": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to install Azure Security Agent"
      }
    },
    "installAntimalwareExtension": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to install Windows Antimalware Extension (Windows only)"
      }
    },
    "antimalwareExclusions": {
      "type": "object",
      "defaultValue": {
        "Paths": [],
        "Extensions": [],
        "Processes": []
      },
      "metadata": {
        "description": "Antimalware exclusion settings"
      }
    },
    "enableManagedIdentity": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to enable system-assigned managed identity"
      }
    },
    "userAssignedIdentities": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "List of user-assigned managed identity resource IDs"
      }
    },
    "createAvailabilitySet": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to create an Availability Set for high availability"
      }
    },
    "availabilitySetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Availability Set (auto-generated if empty)"
      }
    },
    "platformFaultDomainCount": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 1,
      "maxValue": 3,
      "metadata": {
        "description": "Number of fault domains for the Availability Set"
      }
    },
    "platformUpdateDomainCount": {
      "type": "int",
      "defaultValue": 5,
      "minValue": 1,
      "maxValue": 20,
      "metadata": {
        "description": "Number of update domains for the Availability Set"
      }
    },
    "useAvailabilityZones": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to deploy VM in Availability Zones. Cannot be used with createAvailabilitySet=true (mutually exclusive)"
      }
    },
    "availabilityZone": {
      "type": "string",
      "defaultValue": "1",
      "allowedValues": ["1", "2", "3"],
      "metadata": {
        "description": "Availability Zone for the VM (1, 2, or 3)"
      }
    },
    "enableBackup": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to enable Azure Backup for the VM"
      }
    },
    "backupVaultName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Recovery Services Vault for backup (auto-generated if empty)"
      }
    },
    "backupPolicyName": {
      "type": "string",
      "defaultValue": "DefaultPolicy",
      "metadata": {
        "description": "Name of the backup policy to use"
      }
    },
    "dailyRetentionDays": {
      "type": "int",
      "defaultValue": 30,
      "minValue": 7,
      "maxValue": 9999,
      "metadata": {
        "description": "Number of days to retain daily backups"
      }
    },
    "backupScheduleTime": {
      "type": "string",
      "defaultValue": "02:00",
      "metadata": {
        "description": "Time for daily backup schedule (HH:mm format)"
      }
    },
    "enableSnapshot": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to enable disk snapshots for the VM"
      }
    },
    "snapshotRetentionDays": {
      "type": "int",
      "defaultValue": 7,
      "minValue": 1,
      "maxValue": 365,
      "metadata": {
        "description": "Number of days to retain disk snapshots"
      }
    },
    {{#if createVmss}}
    "createVmss": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to create a Virtual Machine Scale Set instead of a single VM"
      }
    },
    "vmssName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Virtual Machine Scale Set"
      }
    },
    "vmssInstanceCount": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 1,
      "maxValue": 100,
      "metadata": {
        "description": "Number of instances in the VMSS"
      }
    },
    "vmssOrchestrationMode": {
      "type": "string",
      "defaultValue": "Uniform",
      "allowedValues": [
        "Uniform",
        "Flexible"
      ],
      "metadata": {
        "description": "VMSS orchestration mode"
      }
    },
    "vmssUpgradeMode": {
      "type": "string",
      "defaultValue": "Manual",
      "allowedValues": [
        "Manual",
        "Automatic",
        "Rolling"
      ],
      "metadata": {
        "description": "VMSS upgrade policy mode"
      }
    },
    "enableAutoScaling": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to enable auto-scaling for the VMSS"
      }
    },
    "autoScaleMin": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 1,
      "maxValue": 50,
      "metadata": {
        "description": "Minimum number of instances in auto-scaling"
      }
    },
    "autoScaleMax": {
      "type": "int",
      "defaultValue": 10,
      "minValue": 2,
      "maxValue": 100,
      "metadata": {
        "description": "Maximum number of instances in auto-scaling"
      }
    },
    "autoScaleDefault": {
      "type": "int",
      "defaultValue": 3,
      "minValue": 1,
      "maxValue": 50,
      "metadata": {
        "description": "Default number of instances in auto-scaling"
      }
    },
    "cpuScaleOutThreshold": {
      "type": "int",
      "defaultValue": 75,
      "minValue": 1,
      "maxValue": 100,
      "metadata": {
        "description": "CPU percentage threshold for scaling out"
      }
    },
    "cpuScaleInThreshold": {
      "type": "int",
      "defaultValue": 25,
      "minValue": 1,
      "maxValue": 100,
      "metadata": {
        "description": "CPU percentage threshold for scaling in"
      }
    },
    "enableMultiRegion": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to enable multi-region deployment with Traffic Manager"
      }
    },
    "trafficManagerProfileName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Traffic Manager profile"
      }
    },
    "trafficManagerDnsName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "DNS name for the Traffic Manager profile"
      }
    },
    "trafficRoutingMethod": {
      "type": "string",
      "defaultValue": "Priority",
      "allowedValues": [
        "Priority",
        "Performance",
        "Geographic",
        "Weighted"
      ],
      "metadata": {
        "description": "Traffic Manager routing method"
      }
    },
    {{/if}}
    {{!-- HA Configuration Parameters --}}
    {{#if haConfig}}
    {{> partials/ha/health-parameters}}
    {{#if haConfig.proximityPlacementGroup.enabled}}
    "createProximityPlacementGroup": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to create a Proximity Placement Group for HA cluster"
      }
    },
    "proximityPlacementGroupName": {
      "type": "string",
      "defaultValue": "{{default haConfig.proximityPlacementGroup.name '[concat(parameters(\"vmssName\"), \"-ppg\")]'}}",
      "metadata": {
        "description": "Name of the Proximity Placement Group"
      }
    },
    {{/if}}
    {{#if haConfig.vmss.enabled}}
    "haVmssInstanceCount": {
      "type": "int",
      "defaultValue": {{default haConfig.vmss.instanceCount 3}},
      "minValue": 2,
      "maxValue": 1000,
      "metadata": {
        "description": "Number of instances in the HA VMSS cluster"
      }
    },
    "haVmssZoneBalance": {
      "type": "bool",
      "defaultValue": {{default haConfig.vmss.zoneBalance true}},
      "metadata": {
        "description": "Whether to balance instances across availability zones"
      }
    },
    "enableHAAutoScaling": {
      "type": "bool",
      "defaultValue": {{default haConfig.vmss.autoScaling.enabled false}},
      "metadata": {
        "description": "Whether to enable auto-scaling for the HA VMSS"
      }
    },
    {{#if haConfig.vmss.autoScaling.enabled}}
    "haAutoScaleMin": {
      "type": "int",
      "defaultValue": {{default haConfig.vmss.autoScaling.minInstances 2}},
      "minValue": 2,
      "maxValue": 50,
      "metadata": {
        "description": "Minimum number of instances in HA auto-scaling"
      }
    },
    "haAutoScaleMax": {
      "type": "int",
      "defaultValue": {{default haConfig.vmss.autoScaling.maxInstances 10}},
      "minValue": 3,
      "maxValue": 1000,
      "metadata": {
        "description": "Maximum number of instances in HA auto-scaling"
      }
    },
    {{/if}}
    {{/if}}
    {{/if}}
    {{#if enableAcceleratedNetworking}}
    "enableAcceleratedNetworking": {
      "type": "bool",
      "defaultValue": {{enableAcceleratedNetworking}},
      "metadata": {
        "description": "Enable accelerated networking for improved network performance (requires supported VM size)"
      }
    },
    {{/if}}
    {{#if securityType}}
    "securityType": {
      "type": "string",
      "defaultValue": "{{securityType}}",
      "allowedValues": [
        "TrustedLaunch",
        "Standard"
      ],
      "metadata": {
        "description": "Security type for the virtual machine (TrustedLaunch requires Gen2 VM images)"
      }
    },
    {{/if}}
    {{#if secureBootEnabled}}
    "secureBootEnabled": {
      "type": "bool",
      "defaultValue": {{secureBootEnabled}},
      "metadata": {
        "description": "Enable UEFI Secure Boot (requires TrustedLaunch security type)"
      }
    },
    {{/if}}
    {{#if vTpmEnabled}}
    "vTpmEnabled": {
      "type": "bool",
      "defaultValue": {{vTpmEnabled}},
      "metadata": {
        "description": "Enable virtual TPM device (requires TrustedLaunch security type)"
      }
    },
    {{/if}}
    {{#if bootDiagnosticsEnabled}}
    "bootDiagnosticsEnabled": {
      "type": "bool",
      "defaultValue": {{bootDiagnosticsEnabled}},
      "metadata": {
        "description": "Enable boot diagnostics for the virtual machine"
      }
    },
    {{/if}}
    {{#if bootDiagnosticsStorageUri}}
    "bootDiagnosticsStorageUri": {
      "type": "string",
      "defaultValue": "{{bootDiagnosticsStorageUri}}",
      "metadata": {
        "description": "Storage URI for boot diagnostics. Leave empty to use managed storage account."
      }
    },
    {{/if}}
    {{#if useEphemeralOSDisk}}
    "useEphemeralOSDisk": {
      "type": "bool",
      "defaultValue": {{useEphemeralOSDisk}},
      "metadata": {
        "description": "Use ephemeral OS disk for faster provisioning and lower cost (requires Premium_LRS or StandardSSD_LRS storage, VM size must support ephemeral disks)"
      }
    },
    {{/if}}
    {{#if ephemeralDiskPlacement}}
    "ephemeralDiskPlacement": {
      "type": "string",
      "defaultValue": "{{ephemeralDiskPlacement}}",
      "allowedValues": [
        "CacheDisk",
        "ResourceDisk"
      ],
      "metadata": {
        "description": "Placement for ephemeral OS disk: CacheDisk (temp cache) or ResourceDisk (temp storage)"
      }
    },
    {{/if}}
    {{#if enableAutoShutdown}}
    "enableAutoShutdown": {
      "type": "bool",
      "defaultValue": {{enableAutoShutdown}},
      "metadata": {
        "description": "Enable automatic shutdown schedule for cost savings (recommended for dev/test environments)"
      }
    },
    {{/if}}
    {{#if autoShutdownTime}}
    "autoShutdownTime": {
      "type": "string",
      "defaultValue": "{{autoShutdownTime}}",
      "metadata": {
        "description": "Daily shutdown time in 24-hour format (e.g., 1900 for 7:00 PM)"
      }
    },
    {{/if}}
    {{#if autoShutdownTimeZone}}
    "autoShutdownTimeZone": {
      "type": "string",
      "defaultValue": "{{autoShutdownTimeZone}}",
      "metadata": {
        "description": "Time zone for shutdown schedule (e.g., Pacific Standard Time, UTC)"
      }
    },
    {{/if}}
    {{#if autoShutdownNotificationEmail}}
    "autoShutdownNotificationEmail": {
      "type": "string",
      "defaultValue": "{{autoShutdownNotificationEmail}}",
      "metadata": {
        "description": "Email address for shutdown notifications (optional)"
      }
    },
    {{/if}}
    {{#if dataDiskCount}}
    "dataDiskCount": {
      "type": "int",
      "defaultValue": {{dataDiskCount}},
      "minValue": 0,
      "maxValue": 32,
      "metadata": {
        "description": "Number of data disks to attach (0-32, limited by VM size)"
      }
    },
    {{/if}}
    {{#if dataDiskSizeGB}}
    "dataDiskSizeGB": {
      "type": "int",
      "defaultValue": {{dataDiskSizeGB}},
      "minValue": 4,
      "maxValue": 32767,
      "metadata": {
        "description": "Size of each data disk in GB (4-32767)"
      }
    },
    {{/if}}
    {{#if dataDiskType}}
    "dataDiskType": {
      "type": "string",
      "defaultValue": "{{dataDiskType}}",
      "allowedValues": [
        "Standard_LRS",
        "StandardSSD_LRS",
        "Premium_LRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "Storage account type for data disks (Premium requires premium-capable VM)"
      }
    },
    {{/if}}
    {{#if dataDiskCaching}}
    "dataDiskCaching": {
      "type": "string",
      "defaultValue": "{{dataDiskCaching}}",
      "allowedValues": [
        "None",
        "ReadOnly",
        "ReadWrite"
      ],
      "metadata": {
        "description": "Caching strategy for data disks"
      }
    },
    {{/if}}
    {{#if enableMonitoring}}
    "enableMonitoring": {
      "type": "bool",
      "defaultValue": {{enableMonitoring}},
      "metadata": {
        "description": "Enable monitoring and alerting for the VM"
      }
    },
    {{/if}}
    {{#if monitoringActionGroupName}}
    "monitoringActionGroupName": {
      "type": "string",
      "defaultValue": "{{monitoringActionGroupName}}",
      "metadata": {
        "description": "Name of the action group for alert notifications"
      }
    },
    {{/if}}
    {{#if monitoringActionGroupShortName}}
    "monitoringActionGroupShortName": {
      "type": "string",
      "defaultValue": "{{monitoringActionGroupShortName}}",
      "maxLength": 12,
      "metadata": {
        "description": "Short name for the action group (max 12 characters)"
      }
    },
    {{/if}}
    {{#if monitoringNotificationEmail}}
    "monitoringNotificationEmail": {
      "type": "string",
      "defaultValue": "{{monitoringNotificationEmail}}",
      "metadata": {
        "description": "Email address for monitoring alert notifications"
      }
    },
    {{/if}}
    {{#if monitoringMetricAlerts}}
    "monitoringMetricAlerts": {
      "type": "array",
      "defaultValue": {{{monitoringMetricAlerts}}},
      "metadata": {
        "description": "Array of metric alert configurations"
      }
    },
    {{/if}}
    {{#if autoShutdownEnabled}}
    "autoShutdownEnabled": {
      "type": "bool",
      "defaultValue": {{autoShutdownEnabled}},
      "metadata": {
        "description": "Enable scheduled auto-shutdown for cost savings"
      }
    },
    {{/if}}
    {{#if autoShutdownTime}}
    "autoShutdownTime": {
      "type": "string",
      "defaultValue": "{{autoShutdownTime}}",
      "metadata": {
        "description": "Daily shutdown time in HH:MM format (24-hour)"
      }
    },
    {{/if}}
    {{#if autoShutdownTimezone}}
    "autoShutdownTimezone": {
      "type": "string",
      "defaultValue": "{{autoShutdownTimezone}}",
      "metadata": {
        "description": "Timezone for shutdown schedule (e.g., UTC, Pacific Standard Time)"
      }
    },
    {{/if}}
    {{#if autoShutdownNotificationMinutesBefore}}
    "autoShutdownNotificationMinutesBefore": {
      "type": "int",
      "defaultValue": {{autoShutdownNotificationMinutesBefore}},
      "minValue": 0,
      "maxValue": 120,
      "metadata": {
        "description": "Send notification this many minutes before shutdown"
      }
    },
    {{/if}}
    {{#if licenseType}}
    "licenseType": {
      "type": "string",
      "defaultValue": "{{licenseType}}",
      "allowedValues": [
        "None",
        "Windows_Server",
        "Windows_Client",
        "AHUB"
      ],
      "metadata": {
        "description": "Azure Hybrid Benefit license type for Windows Server or SQL Server"
      }
    },
    {{/if}}
    "dummyLastParameter": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Internal parameter to handle trailing commas"
      }
    }
  },
  "variables": {
    {{#if vmName}}
    "vmName": "[parameters('vmName')]",
    {{/if}}
    {{#if networkInterfaceName}}
    "networkInterfaceName": "{{{networkInterfaceName}}}",
    {{/if}}
    {{#if networkSecurityGroupName}}
    "networkSecurityGroupName": "{{{networkSecurityGroupName}}}",
    {{/if}}
    {{#if virtualNetworkName}}
    "virtualNetworkName": "{{{virtualNetworkName}}}",
    {{/if}}
    {{#if subnetName}}
    "subnetName": "{{subnetName}}",
    {{/if}}
    {{#if publicIPAddressName}}
    "publicIPAddressName": "{{{publicIPAddressName}}}",
    {{/if}}
    {{#if osDiskName}}
    "osDiskName": "{{{osDiskName}}}",
    {{/if}}
    {{#if linuxConfiguration}}
    "linuxConfiguration": {{{linuxConfiguration}}},
    {{/if}}
    {{#if windowsConfiguration}}
    "windowsConfiguration": {{{windowsConfiguration}}},
    {{/if}}
    {{#if loadBalancerName}}
    "loadBalancerName": "{{{loadBalancerName}}}",
    {{/if}}
    {{#if backendPoolName}}
    "backendPoolName": "{{{backendPoolName}}}",
    {{else}}
    "backendPoolName": "[concat(variables('loadBalancerName'), '-backend')]",
    {{/if}}
    {{#if loadBalancingRuleName}}
    "loadBalancingRuleName": "{{{loadBalancingRuleName}}}",
    {{else}}
    "loadBalancingRuleName": "[concat(variables('loadBalancerName'), '-rule')]",
    {{/if}}
    {{#if healthProbeName}}
    "healthProbeName": "{{{healthProbeName}}}",
    {{else}}
    "healthProbeName": "[concat(variables('loadBalancerName'), '-probe')]",
    {{/if}}
    {{#if applicationGatewayName}}
    "applicationGatewayName": "{{{applicationGatewayName}}}",
    {{/if}}
    {{#if bastionHostName}}
    "bastionHostName": "{{{bastionHostName}}}",
    {{else}}
    "bastionHostName": "[concat(parameters('vmName'), '-bastion')]",
    {{/if}}
    {{#if bastionSubnetName}}
    "bastionSubnetName": "{{{bastionSubnetName}}}",
    {{else}}
    "bastionSubnetName": "AzureBastionSubnet",
    {{/if}}
    {{#if subnetRef}}
    "subnetRef": "{{{subnetRef}}}",
    {{else}}
    "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
    {{/if}}
    "extensionPublisher": "[if(equals(parameters('osType'), 'Windows'), 'Microsoft.Compute', 'Microsoft.Azure.Extensions')]",
    "customScriptExtensionName": "[if(equals(parameters('osType'), 'Windows'), 'CustomScriptExtension', 'CustomScript')]",
    "monitoringExtensionName": "[if(equals(parameters('osType'), 'Windows'), 'MicrosoftMonitoringAgent', 'OmsAgentForLinux')]",
    "securityExtensionName": "[if(equals(parameters('osType'), 'Windows'), 'IaaSAntimalware', 'LinuxDiagnostic')]",
    "antimalwareExtensionName": "IaaSAntimalware",
    "azureMonitorExtensionName": "AzureMonitorWindowsAgent",
    "extensionApiVersion": "2023-07-01",
    "managedIdentityType": "[if(empty(parameters('userAssignedIdentities')), 'SystemAssigned', 'SystemAssigned,UserAssigned')]",
    "userAssignedIdentityConfig": "[if(empty(parameters('userAssignedIdentities')), json('{}'), json(concat('{\"', string(parameters('userAssignedIdentities')[0]), '\": {}}')))]",
    "customScriptFileUris": "[if(empty(parameters('customScriptUrl')), json('[]'), array(parameters('customScriptUrl')))]",
    "availabilitySetName": "[if(empty(parameters('availabilitySetName')), concat(parameters('vmName'), '-avset'), parameters('availabilitySetName'))]",
    "backupVaultName": "[if(empty(parameters('backupVaultName')), concat(parameters('vmName'), '-vault'), parameters('backupVaultName'))]",
    "backupPolicyName": "[if(equals(parameters('backupPolicyName'), 'DefaultPolicy'), concat('policy-', parameters('vmName')), parameters('backupPolicyName'))]",
    "snapshotName": "[concat(parameters('vmName'), '-snapshot')]",
    "backupScheduleTimestamp": "[concat('2025-01-01T', parameters('backupScheduleTime'), ':00Z')]"{{#if createVmss}},
    "vmssName": "[if(empty(parameters('vmssName')), concat(parameters('vmName'), '-vmss'), parameters('vmssName'))]",
    "autoScaleName": "[concat(variables('vmssName'), '-autoscale')]",
    "trafficManagerProfileName": "[if(empty(parameters('trafficManagerProfileName')), concat(parameters('vmName'), '-tm'), parameters('trafficManagerProfileName'))]",
    "trafficManagerDnsName": "[if(empty(parameters('trafficManagerDnsName')), concat(parameters('vmName'), '-', take(replace(guid(), '-', ''), 6)), parameters('trafficManagerDnsName'))]",
    "vmssTargetResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', variables('vmssName'))]"{{/if}}{{#if haConfig}},{{/if}}{{#if dataDiskCount}},{{/if}}
    {{!-- HA Variables --}}
    {{#if haConfig}}
    {{#if haConfig.proximityPlacementGroup.enabled}}
    "proximityPlacementGroupName": "[if(parameters('createProximityPlacementGroup'), parameters('proximityPlacementGroupName'), '')]",
    {{/if}}
    {{#if haConfig.loadBalancer.enabled}}
    "haLoadBalancerName": "[concat(variables('vmssName'), '-ha-lb')]",
    "haBackendPoolName": "[concat(variables('haLoadBalancerName'), '-backend')]",
    "haHealthProbeName": "[concat(variables('haLoadBalancerName'), '-probe')]",
    {{/if}}
    {{#if haConfig.vmss.enabled}}
    "haVmssName": "[variables('vmssName')]",
    "haAutoScaleName": "[concat(variables('haVmssName'), '-ha-autoscale')]",
    {{/if}}
    {{#if haConfig.healthMonitoring.enabled}}
    {{> partials/ha/health-parameters variables=true}}
    {{/if}}
    {{/if}}
    {{#if dataDiskCount}}
    "dataDiskNamePrefix": "[concat(parameters('vmName'), '-datadisk-')]",
    "lunStart": 0{{/if}}
  },
  "resources": [
    {{!-- HA Cluster Resources --}}
    {{#if haConfig}}
    {{#if haConfig.proximityPlacementGroup.enabled}}
    {{> partials/ha/ppg-resources}},
    {{/if}}
    {{#if haConfig.loadBalancer.enabled}}
    {{> partials/ha/load-balancer-resources}},
    {{/if}}
    {{#if haConfig.healthMonitoring.enabled}}
    {{> partials/ha/health-resources}},
    {{/if}}
    {{/if}}
    {{!-- Standard Resources --}}
    {{#if createNetworkSecurityGroup}}
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2023-05-01",
      "name": "[variables('networkSecurityGroupName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {{#each securityRules}}
          {
            "name": "{{name}}",
            "properties": {
              "priority": {{priority}},
              "protocol": "{{protocol}}",
              "access": "{{access}}",
              "direction": "{{direction}}",
              "sourceAddressPrefix": "{{sourceAddressPrefix}}",
              "sourcePortRange": "{{sourcePortRange}}",
              "destinationAddressPrefix": "{{destinationAddressPrefix}}",
              "destinationPortRange": "{{destinationPortRange}}"
            }
          }{{#unless @last}},{{/unless}}
          {{/each}}
        ]
      }
    },
    {{/if}}
    {{#if createVirtualNetwork}}
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2023-05-01",
      "name": "[variables('virtualNetworkName')]",
      "location": "[parameters('location')]",
      {{#if createNetworkSecurityGroup}}
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
      ],
      {{/if}}
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "{{virtualNetworkAddressPrefix}}"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "{{subnetAddressPrefix}}"{{#if createNetworkSecurityGroup}},
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
              }{{/if}}
            }
          }{{#if createBastion}},
          {
            "name": "[variables('bastionSubnetName')]",
            "properties": {
              "addressPrefix": "{{bastionSubnetAddressPrefix}}"
            }
          }{{/if}}
        ]
      }
    },
    {{/if}}
    {{#if createLoadBalancer}}
    {{{[scale:lb.definition]
      name="[variables('loadBalancerName')]"
      sku="[parameters('loadBalancerSku')]"
      location="[parameters('location')]"
      frontendIPConfigurations=(if createPublicIP
        (array (object 
          name="LoadBalancerFrontEnd"
          publicIpAddressId="[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
        ))
        (array (object
          name="LoadBalancerFrontEnd"
          subnetId="[variables('subnetRef')]"
          privateIPAllocationMethod="Dynamic"
        ))
      )
      backendAddressPools=(array (object
        name="[variables('backendPoolName')]"
        vmssResourceId=(if createVmss "[resourceId('Microsoft.Compute/virtualMachineScaleSets', variables('vmssName'))]" "")
      ))
      probes=(array (object
        name="[variables('healthProbeName')]"
        protocol="[parameters('healthProbeProtocol')]"
        port="[parameters('healthProbePort')]"
        intervalInSeconds="[parameters('healthProbeInterval')]"
        numberOfProbes="[parameters('healthProbeRetries')]"
        requestPath=(if (equals "[parameters('healthProbeProtocol')]" "Http") "/health" "")
      ))
      loadBalancingRules=(array (object
        name="[variables('loadBalancingRuleName')]"
        protocol="[parameters('loadBalancingProtocol')]"
        frontendPort="[parameters('loadBalancingFrontendPort')]"
        backendPort="[parameters('loadBalancingBackendPort')]"
        frontendIPConfigName="LoadBalancerFrontEnd"
        backendPoolName="[variables('backendPoolName')]"
        probeName="[variables('healthProbeName')]"
      ))
      dependsOn=(union
        (if createPublicIP (array "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]") (array))
        (if createVirtualNetwork (array "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]") (array))
      )
    }}},
    {{/if}}
    {{#if createApplicationGateway}}
    {{{[scale:appgw.definition]
      name="[variables('applicationGatewayName')]"
      location="[parameters('location')]"
      sku=(object
        name="[parameters('applicationGatewaySize')]"
        tier="[parameters('applicationGatewayTier')]"
        capacity="[parameters('applicationGatewayCapacity')]"
      )
      gatewayIPConfigurations=(array (object
        name="appGatewayIpConfig"
        subnetId="[variables('subnetRef')]"
      ))
      frontendIPConfigurations=(array (object
        name="appGatewayFrontendIP"
        publicIpAddressId=(if createPublicIP "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]" "")
        subnetId=(if createPublicIP "" "[variables('subnetRef')]")
        privateIPAllocationMethod=(if createPublicIP "" "Dynamic")
      ))
      frontendPorts=(array (object
        name="appGatewayFrontendPort"
        port="[parameters('applicationGatewayPort')]"
      ))
      backendAddressPools=(array (object
        name="appGatewayBackendPool"
        addresses=(array)
      ))
      httpSettings=(array (object
        name="appGatewayBackendHttpSettings"
        port="[parameters('applicationGatewayBackendPort')]"
        protocol="[parameters('applicationGatewayProtocol')]"
        cookieBasedAffinity="Disabled"
      ))
      listeners=(array (object
        name="appGatewayHttpListener"
        frontendIPConfigName="appGatewayFrontendIP"
        frontendPortName="appGatewayFrontendPort"
        protocol="[parameters('applicationGatewayProtocol')]"
      ))
      requestRoutingRules=(array (object
        name="rule1"
        ruleType="Basic"
        listenerName="appGatewayHttpListener"
        backendPoolName="appGatewayBackendPool"
        backendHttpSettingsName="appGatewayBackendHttpSettings"
      ))
      dependsOn=(union
        (if createVirtualNetwork (array "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]") (array))
        (if createPublicIP (array "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]") (array))
      )
    }}},
    {{/if}}
    {{#if createBastion}}
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2023-05-01",
      "name": "[concat(variables('bastionHostName'), '-pip')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "type": "Microsoft.Network/bastionHosts",
      "apiVersion": "2023-05-01",
      "name": "[variables('bastionHostName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('bastionHostName'), '-pip'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "IpConf",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('bastionHostName'), '-pip'))]"
              },
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('bastionSubnetName'))]"
              }
            }
          }
        ]
      }
    },
    {{/if}}
    {{#if createPublicIP}}
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2023-05-01",
      "name": "[variables('publicIPAddressName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "{{publicIPAllocationMethod}}"{{#if publicIPSku}},
        "sku": {
          "name": "{{publicIPSku}}"
        }{{/if}}{{#if dnsLabelPrefix}},
        "dnsSettings": {
          "domainNameLabel": "{{dnsLabelPrefix}}"
        }{{/if}}
      }
    },
    {{/if}}
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2023-05-01",
      "name": "[variables('networkInterfaceName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        {{#if createVirtualNetwork}}
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"{{#if createPublicIP}},{{/if}}
        {{/if}}
        {{#if createPublicIP}}
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
        {{/if}}
      ],
      "properties": {
        {{#if enableAcceleratedNetworking}}
        "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
        {{/if}}
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              }{{#if createPublicIP}},
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
              }{{/if}}
            }
          }
        ]
      }
    },
    {{#if createAvailabilitySet}}
    {
      "type": "Microsoft.Compute/availabilitySets",
      "apiVersion": "2023-09-01",
      "name": "[variables('availabilitySetName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Aligned"
      },
      "properties": {
        "platformFaultDomainCount": "[parameters('platformFaultDomainCount')]",
        "platformUpdateDomainCount": "[parameters('platformUpdateDomainCount')]"
      }
    },
    {{/if}}
    {{#if enableBackup}}
    {
      "type": "Microsoft.RecoveryServices/vaults",
      "apiVersion": "2023-06-01",
      "name": "[variables('backupVaultName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "RS0",
        "tier": "Standard"
      },
      "properties": {
        "publicNetworkAccess": "Enabled",
        "restoreSettings": {
          "crossRegionRestoreFlag": false
        },
        "securitySettings": {
          "immutabilitySettings": {
            "state": "Unlocked"
          }
        }
      }
    },
    {
      "type": "Microsoft.RecoveryServices/vaults/backupPolicies",
      "apiVersion": "2023-06-01",
      "name": "[concat(variables('backupVaultName'), '/', variables('backupPolicyName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.RecoveryServices/vaults', variables('backupVaultName'))]"
      ],
      "properties": {
        "backupManagementType": "AzureIaasVM",
        "schedulePolicy": {
          "schedulePolicyType": "SimpleSchedulePolicy",
          "scheduleRunFrequency": "Daily",
          "scheduleRunTimes": [
            "[variables('backupScheduleTimestamp')]"
          ],
          "scheduleWeeklyFrequency": 0
        },
        "retentionPolicy": {
          "retentionPolicyType": "LongTermRetentionPolicy",
          "dailySchedule": {
            "retentionTimes": [
              "[variables('backupScheduleTimestamp')]"
            ],
            "retentionDuration": {
              "count": "[parameters('dailyRetentionDays')]",
              "durationType": "Days"
            }
          }
        },
        "instantRpRetentionRangeInDays": 2,
        "timeZone": "UTC"
      }
    },
    {{/if}}
    {{#if createVmss}}
    {{#if haConfig.vmss.enabled}}
    {{!-- HA VMSS with enhanced configuration --}}
    {{> partials/ha/vmss-resources}},
    {{#if haConfig.vmss.autoScaling.enabled}}
    {{> partials/ha/autoscaling-resources}},
    {{/if}}
    {{else}}
    {{!-- Standard VMSS --}}
    {{{[scale:vmss.definition] 
      name=vmssName
      vmSize="[parameters('vmSize')]"
      instanceCount="[parameters('vmssInstanceCount')]"
      orchestrationMode="[parameters('vmssOrchestrationMode')]"
      upgradeMode="[parameters('vmssUpgradeMode')]"
      subnetId="[variables('subnetRef')]"
      loadBalancerBackendPoolIds="[if(parameters('createLoadBalancer'), array(resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerName'), variables('backendPoolName'))), json('[]'))]"
      applicationGatewayBackendPoolIds="[if(parameters('createApplicationGateway'), array(resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('applicationGatewayName'), 'appGatewayBackendPool')), json('[]'))]"
      adminUsername="[parameters('adminUsername')]"
      adminPasswordOrKey="[parameters('adminPasswordOrKey')]"
      authenticationType="[parameters('authenticationType')]"
      osImageReference="[parameters('osImageReference')]"
      osDiskStorageAccountType="[parameters('storageAccountType')]"
      enableBootDiagnostics=enableBootDiagnostics
      zones="[if(parameters('useAvailabilityZones'), array(parameters('availabilityZone')), json('[]'))]"
      location="[parameters('location')]"
    }}},
    {{/if}}
    {{/if}}
    {{#if enableAutoScaling}}
    {{{[scale:autoscale.cpu]
      name="[variables('autoScaleName')]"
      targetResourceUri="[variables('vmssTargetResourceUri')]"
      minCapacity="[parameters('autoScaleMin')]"
      maxCapacity="[parameters('autoScaleMax')]"
      defaultCapacity="[parameters('autoScaleDefault')]"
      scaleOutThreshold="[parameters('cpuScaleOutThreshold')]"
      scaleInThreshold="[parameters('cpuScaleInThreshold')]"
      location="[parameters('location')]"
    }}},
    {{/if}}
    {{#if enableMultiRegion}}
    {{{[scale:multiregion.profile]
      name="[variables('trafficManagerProfileName')]"
      dnsName="[variables('trafficManagerDnsName')]"
      routingMethod="[parameters('trafficRoutingMethod')]"
      monitorProtocol="HTTPS"
      monitorPort=443
      monitorPath="/health"
      endpoints=multiRegionEndpoints
      location="global"
    }}},
    {{/if}}
    {{#unless createVmss}}
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2023-04-01",
      "name": "[variables('vmName')]",
      "location": "[parameters('location')]",
      {{#if useAvailabilityZones}}
      {{#unless createAvailabilitySet}}
      "zones": ["[parameters('availabilityZone')]"],
      {{/unless}}
      {{/if}}
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"{{#if createAvailabilitySet}}{{#unless useAvailabilityZones}},
        "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"{{/unless}}{{/if}}
      ],
      {{#if enableManagedIdentity}}
      "identity": {
        "type": "{{{managedIdentityType}}}"{{#if userAssignedIdentities}},
        "userAssignedIdentities": "{{{userAssignedIdentityConfig}}}"{{/if}}
      },
      {{/if}}
      "properties": {
        {{#if createAvailabilitySet}}
        {{#unless useAvailabilityZones}}
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
        },
        {{/unless}}
        {{/if}}
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          {{#if isLinux}}
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
          {{else}}
          "adminPassword": "[parameters('adminPasswordOrKey')]"{{#if windowsConfiguration}},
          "windowsConfiguration": "[variables('windowsConfiguration')]"
          {{/if}}
          {{/if}}
          {{#unless isLinux}}
          {{#if authenticationType}}
          {{#unless (eq authenticationType "password")}}
          ,"adminPassword": "[parameters('adminPasswordOrKey')]"
          {{/unless}}
          {{/if}}
          {{/unless}}
        },{{#if licenseType}}
        "licenseType": "[if(not(equals(parameters('licenseType'), 'None')), parameters('licenseType'), json('null'))]",
        {{/if}}
        "storageProfile": {
          "imageReference": "[parameters('osImageReference')]",
          "osDisk": {
            "name": "[variables('osDiskName')]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[parameters('storageAccountType')]"
            }{{#if useEphemeralOSDisk}},
            "diffDiskSettings": {
              "option": "Local",
              "placement": "[parameters('ephemeralDiskPlacement')]"
            }{{/if}}
          }{{#if dataDiskCount}},
          "dataDisks": {
            "copy": [
              {
                "name": "dataDisks",
                "count": "[parameters('dataDiskCount')]",
                "input": {
                  "lun": "[copyIndex('dataDisks')]",
                  "name": "[concat(variables('dataDiskNamePrefix'), copyIndex('dataDisks'))]",
                  "createOption": "Empty",
                  "diskSizeGB": "[parameters('dataDiskSizeGB')]",
                  "caching": "[parameters('dataDiskCaching')]",
                  "managedDisk": {
                    "storageAccountType": "[parameters('dataDiskType')]"
                  }
                }
              }
            ]
          }{{/if}}
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
            }
          ]
        }{{#if securityType}},
        "securityProfile": {
          "securityType": "[parameters('securityType')]",
          "uefiSettings": {
            "secureBootEnabled": "[parameters('secureBootEnabled')]",
            "vTpmEnabled": "[parameters('vTpmEnabled')]"
          }
        }{{/if}}{{#if bootDiagnosticsEnabled}},
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "[parameters('bootDiagnosticsEnabled')]"{{#if bootDiagnosticsStorageUri}},
            "storageUri": "[parameters('bootDiagnosticsStorageUri')]"{{/if}}
          }
        }{{/if}}{{#if enableBootDiagnostics}},
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true
          }
        }{{/if}}
      }
    }{{#if enableBackup}},
    {
      "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
      "apiVersion": "2023-06-01",
      "name": "[concat(variables('backupVaultName'), '/Azure/iaasvmcontainer;iaasvmcontainerv2;', resourceGroup().name, ';', variables('vmName'), '/vm;iaasvmcontainerv2;', resourceGroup().name, ';', variables('vmName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]",
        "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', variables('backupVaultName'), variables('backupPolicyName'))]"
      ],
      "properties": {
        "protectedItemType": "Microsoft.Compute/virtualMachines",
        "policyId": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', variables('backupVaultName'), variables('backupPolicyName'))]",
        "sourceResourceId": "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
      }
    }{{/if}}{{#if enableSnapshot}},
    {
      "type": "Microsoft.Compute/snapshots",
      "apiVersion": "2023-10-02",
      "name": "[variables('snapshotName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
      ],
      "tags": {
        "retentionDays": "[parameters('snapshotRetentionDays')]",
        "createdBy": "ARM-Template",
        "purpose": "VM-Backup"
      },
      "properties": {
        "creationData": {
          "createOption": "Copy",
          "sourceResourceId": "[resourceId('Microsoft.Compute/disks', variables('osDiskName'))]"
        },
        "incremental": false
      }
    }{{/if}}{{#if installExtensions}},
    {{#if installCustomScriptExtension}}
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "[variables('extensionApiVersion')]",
      "name": "[concat(variables('vmName'), '/', variables('customScriptExtensionName'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
      ],
      "properties": {
        "publisher": "[variables('extensionPublisher')]",
        "type": "[variables('customScriptExtensionName')]",
        "typeHandlerVersion": "[if(equals(parameters('osType'), 'Windows'), '1.10', '2.1')]",
        "autoUpgradeMinorVersion": true,
        "settings": {
          {{#if isLinux}}
          "fileUris": "{{{customScriptFileUris}}}",
          "commandToExecute": "[parameters('customScriptCommand')]"
          {{else}}
          "fileUris": "{{{customScriptFileUris}}}"
          {{/if}}
        }{{#unless isLinux}},
        "protectedSettings": {
          "commandToExecute": "[parameters('customScriptCommand')]"
        }{{/unless}}
      }
    },
    {{/if}}
    {{#if installMonitoringExtension}}
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "[variables('extensionApiVersion')]",
      "name": "[concat(variables('vmName'), '/', variables('monitoringExtensionName'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
        "type": "[variables('monitoringExtensionName')]",
        "typeHandlerVersion": "[if(equals(parameters('osType'), 'Windows'), '1.0', '1.13')]",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "workspaceId": "[parameters('workspaceId')]"
        },
        "protectedSettings": {
          "workspaceKey": "[parameters('workspaceKey')]"
        }
      }
    },
    {{/if}}
    {{#if installSecurityExtension}}
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "[variables('extensionApiVersion')]",
      "name": "[concat(variables('vmName'), '/', variables('securityExtensionName'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
      ],
      "properties": {
        "publisher": "[if(equals(parameters('osType'), 'Windows'), 'Microsoft.Azure.Security', 'Microsoft.Azure.Security.Monitoring')]",
        "type": "[variables('securityExtensionName')]",
        "typeHandlerVersion": "[if(equals(parameters('osType'), 'Windows'), '1.5', '3.0')]",
        "autoUpgradeMinorVersion": true,
        "settings": {}
      }
    },
    {{/if}}
    {{#if installAntimalwareExtension}}
    {{#unless isLinux}}
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "[variables('extensionApiVersion')]",
      "name": "[concat(variables('vmName'), '/', variables('antimalwareExtensionName'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Security",
        "type": "IaaSAntimalware",
        "typeHandlerVersion": "1.5",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "AntimalwareEnabled": true,
          "Exclusions": "[parameters('antimalwareExclusions')]",
          "RealtimeProtectionEnabled": "true",
          "ScheduledScanSettings": {
            "isEnabled": "true",
            "scanType": "Quick",
            "day": "7",
            "time": "120"
          }
        }
      }
    }
    {{/unless}}
    {{/if}}
    {{/if}}
    {{/unless}}{{#if enableMonitoring}},
    {
      "type": "Microsoft.Insights/actionGroups",
      "apiVersion": "2023-01-01",
      "name": "[parameters('monitoringActionGroupName')]",
      "location": "global",
      "properties": {
        "groupShortName": "[parameters('monitoringActionGroupShortName')]",
        "enabled": true,
        "emailReceivers": [
          {
            "name": "AdminEmail",
            "emailAddress": "[parameters('monitoringNotificationEmail')]",
            "useCommonAlertSchema": true
          }
        ]
      }
    }{{/if}}{{#if monitoringMetricAlerts}},
    {
      "copy": {
        "name": "metricAlertCopy",
        "count": "[length(parameters('monitoringMetricAlerts'))]"
      },
      "type": "Microsoft.Insights/metricAlerts",
      "apiVersion": "2023-01-01-preview",
      "name": "[concat(variables('vmName'), '-alert-', parameters('monitoringMetricAlerts')[copyIndex()].name)]",
      "location": "global",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"{{#if enableMonitoring}},
        "[resourceId('Microsoft.Insights/actionGroups', parameters('monitoringActionGroupName'))]"{{/if}}
      ],
      "properties": {
        "description": "[parameters('monitoringMetricAlerts')[copyIndex()].description]",
        "severity": "[parameters('monitoringMetricAlerts')[copyIndex()].severity]",
        "enabled": true,
        "scopes": [
          "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
        ],
        "evaluationFrequency": "[parameters('monitoringMetricAlerts')[copyIndex()].evaluationFrequency]",
        "windowSize": "[parameters('monitoringMetricAlerts')[copyIndex()].windowSize]",
        "criteria": {
          "allOf": [
            {
              "criterionType": "StaticThresholdCriterion",
              "name": "[parameters('monitoringMetricAlerts')[copyIndex()].name]",
              "metricName": "[parameters('monitoringMetricAlerts')[copyIndex()].metricName]",
              "metricNamespace": "Microsoft.Compute/virtualMachines",
              "operator": "[parameters('monitoringMetricAlerts')[copyIndex()].operator]",
              "threshold": "[parameters('monitoringMetricAlerts')[copyIndex()].threshold]",
              "timeAggregation": "[parameters('monitoringMetricAlerts')[copyIndex()].timeAggregation]"
            }
          ],
          "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
        },
        "autoMitigate": true,
        "targetResourceType": "Microsoft.Compute/virtualMachines",
        "targetResourceRegion": "[parameters('location')]",
        "actions": [{{#if enableMonitoring}}
          {
            "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', parameters('monitoringActionGroupName'))]"
          }{{/if}}
        ]
      }
    }{{/if}}{{#if autoShutdownEnabled}},
    {
      "type": "Microsoft.DevTestLab/schedules",
      "apiVersion": "2022-08-01",
      "name": "[concat('shutdown-computevm-', variables('vmName'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
      ],
      "properties": {
        "status": "Enabled",
        "taskType": "ComputeVmShutdownTask",
        "dailyRecurrence": {
          "time": "[parameters('autoShutdownTime')]"
        },
        "timeZoneId": "[parameters('autoShutdownTimezone')]",
        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"{{#if monitoringNotificationEmail}},
        "notificationSettings": {
          "status": "Enabled",
          "timeInMinutes": "[parameters('autoShutdownNotificationMinutesBefore')]",
          "emailRecipient": "[parameters('monitoringNotificationEmail')]",
          "notificationLocale": "en"
        }{{/if}}
      }
    }{{/if}}
  ],
  "outputs": {
    {{#if vmName}}
    "vmName": {
      "type": "string",
      "value": "[variables('vmName')]"
    },
    {{/if}}
    {{#if createPublicIP}}
    "publicIPAddress": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))).ipAddress]"
    },
    {{/if}}
    "adminUsername": {
      "type": "string", 
      "value": "[parameters('adminUsername')]"
    },
    "extensionsInstalled": {
      "type": "array",
      "value": "[if(parameters('installExtensions'), union(if(parameters('installCustomScriptExtension'), array('CustomScript'), createArray()), if(parameters('installMonitoringExtension'), array('MonitoringAgent'), createArray()), if(parameters('installSecurityExtension'), array('SecurityAgent'), createArray()), if(and(parameters('installAntimalwareExtension'), equals(parameters('osType'), 'Windows')), array('Antimalware'), createArray())), createArray())]"
    },
    {{#if installExtensions}}
    {{#if installCustomScriptExtension}}
    "customScriptExtensionStatus": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', variables('vmName'), variables('customScriptExtensionName'))).provisioningState]"
    },
    {{/if}}
    {{#if installMonitoringExtension}}
    "monitoringExtensionStatus": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', variables('vmName'), variables('monitoringExtensionName'))).provisioningState]"
    },
    {{/if}}
    {{#if installSecurityExtension}}
    "securityExtensionStatus": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', variables('vmName'), variables('securityExtensionName'))).provisioningState]"
    },
    {{/if}}
    {{#if installAntimalwareExtension}}
    {{#unless isLinux}}
    "antimalwareExtensionStatus": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', variables('vmName'), variables('antimalwareExtensionName'))).provisioningState]"
    },
    {{/unless}}
    {{/if}}
    {{/if}}
    {{#if enableManagedIdentity}}
    "managedIdentityPrincipalId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines', variables('vmName')), '2021-03-01', 'Full').identity.principalId]"
    },
    {{/if}}
    "vmResourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
    }{{#if createAvailabilitySet}},
    "availabilitySetId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
    },
    "availabilitySetName": {
      "type": "string",
      "value": "[variables('availabilitySetName')]"
    }{{/if}}{{#if useAvailabilityZones}},
    "availabilityZone": {
      "type": "string",
      "value": "[parameters('availabilityZone')]"
    }{{/if}}{{#if enableBackup}},
    "backupVaultId": {
      "type": "string",
      "value": "[resourceId('Microsoft.RecoveryServices/vaults', variables('backupVaultName'))]"
    },
    "backupPolicyId": {
      "type": "string",
      "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', variables('backupVaultName'), variables('backupPolicyName'))]"
    }{{/if}}{{#if enableSnapshot}},
    "snapshotId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Compute/snapshots', variables('snapshotName'))]"
    }{{/if}}{{#if sshCommand}},
        {{#if sshCommand}},
    "sshCommand": {
      "type": "string",
      "value": "{{sshCommand}}"
    }{{/if}}{{#if createVmss}},
    "vmssName": {
      "type": "string",
      "value": "[variables('vmssName')]"
    },
    "vmssResourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', variables('vmssName'))]"
    }{{/if}}{{#if enableAutoScaling}},
    "autoScaleName": {
      "type": "string",
      "value": "[variables('autoScaleName')]"
    },
    "autoScaleResourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Insights/autoscalesettings', variables('autoScaleName'))]"
    }{{/if}}{{#if enableMultiRegion}},
    "trafficManagerProfileName": {
      "type": "string",
      "value": "[variables('trafficManagerProfileName')]"
    },
    "trafficManagerFqdn": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/trafficManagerProfiles', variables('trafficManagerProfileName'))).dnsConfig.fqdn]"
    }{{/if}}{{#if haConfig}},
    {{!-- HA Cluster Outputs --}}
    "haClusterConfiguration": {
      "type": "object",
      "value": {
        "enabled": true,
        "version": "1.11.0",
        {{#if haConfig.proximityPlacementGroup.enabled}}
        "proximityPlacementGroup": {
          "resourceId": "[resourceId('Microsoft.Compute/proximityPlacementGroups', variables('proximityPlacementGroupName'))]",
          "name": "[variables('proximityPlacementGroupName')]"
        },
        {{/if}}
        {{#if haConfig.loadBalancer.enabled}}
        "loadBalancer": {
          "resourceId": "[resourceId('Microsoft.Network/loadBalancers', variables('haLoadBalancerName'))]",
          "name": "[variables('haLoadBalancerName')]",
          {{#if haConfig.loadBalancer.createPublicIP}}
          "publicIPAddress": "[reference(resourceId('Microsoft.Network/publicIPAddresses', concat(variables('haLoadBalancerName'), '-pip'))).ipAddress]",
          "fqdn": "[reference(resourceId('Microsoft.Network/publicIPAddresses', concat(variables('haLoadBalancerName'), '-pip'))).dnsSettings.fqdn]",
          {{/if}}
          "backendPool": "[variables('haBackendPoolName')]"
        },
        {{/if}}
        {{#if haConfig.vmss.enabled}}
        "vmss": {
          "resourceId": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', variables('haVmssName'))]",
          "name": "[variables('haVmssName')]",
          "instanceCount": "[parameters('haVmssInstanceCount')]",
          "orchestrationMode": "{{default haConfig.vmss.orchestrationMode 'Uniform'}}",
          "upgradePolicy": "{{default haConfig.vmss.upgradePolicy.mode 'Rolling'}}",
          {{#if haConfig.vmss.zones}}
          "zones": [{{#each haConfig.vmss.zones}}"{{this}}"{{#unless @last}},{{/unless}}{{/each}}],
          {{else}}
          "zones": ["1", "2", "3"],
          {{/if}}
          {{#if haConfig.vmss.autoScaling.enabled}}
          "autoScaling": {
            "enabled": true,
            "resourceId": "[resourceId('Microsoft.Insights/autoscalesettings', variables('haAutoScaleName'))]",
            "name": "[variables('haAutoScaleName')]",
            "minInstances": "[parameters('haAutoScaleMin')]",
            "maxInstances": "[parameters('haAutoScaleMax')]"
          }
          {{else}}
          "autoScaling": {
            "enabled": false
          }
          {{/if}}
        },
        {{/if}}
        {{#if haConfig.healthMonitoring.enabled}}
        "healthMonitoring": {
          "enabled": true,
          {{#if haConfig.healthMonitoring.applicationHealthExtension.enabled}}
          "applicationHealthExtension": {
            "enabled": true,
            "protocol": "{{haConfig.healthMonitoring.applicationHealthExtension.protocol}}",
            "port": {{haConfig.healthMonitoring.applicationHealthExtension.port}},
            "gracePeriod": "{{default haConfig.healthMonitoring.applicationHealthExtension.gracePeriod 'PT30M'}}"
          },
          {{/if}}
          {{#if haConfig.healthMonitoring.automaticRepairPolicy.enabled}}
          "automaticRepairPolicy": {
            "enabled": true,
            "gracePeriod": "{{default haConfig.healthMonitoring.automaticRepairPolicy.gracePeriod 'PT30M'}}",
            "maxInstanceRepairs": {{default haConfig.healthMonitoring.automaticRepairPolicy.maxInstanceRepairs 3}}
          },
          {{/if}}
          {{#if haConfig.healthMonitoring.healthReporting.enabled}}
          "healthReporting": {
            "enabled": true,
            {{#if haConfig.healthMonitoring.healthReporting.logAnalyticsWorkspaceId}}
            "logAnalyticsWorkspace": "[resourceId('Microsoft.OperationalInsights/workspaces', concat(variables('haVmssName'), '-health-workspace'))]",
            {{/if}}
            {{#if haConfig.healthMonitoring.healthReporting.applicationInsightsInstrumentationKey}}
            "applicationInsights": "[resourceId('Microsoft.Insights/components', concat(variables('haVmssName'), '-health-insights'))]",
            {{/if}}
            "diagnosticsStorage": "[resourceId('Microsoft.Storage/storageAccounts', variables('diagnosticsStorageAccountName'))]"
          }
          {{/if}}
        }
        {{/if}}
      }
    }{{/if}}
  }{{/if}}
  }
}
