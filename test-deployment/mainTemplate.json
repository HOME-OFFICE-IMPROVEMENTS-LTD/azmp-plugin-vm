{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmName": {
      "type": "string",
      "metadata": {
        "description": "Name of the virtual machine"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Size of the virtual machine (e.g., Standard_D2s_v3)"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Admin username for the VM"
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "sshPublicKey",
      "allowedValues": [
        "sshPublicKey",
        "password"
      ]
    },
    "adminPasswordOrKey": {
      "type": "securestring",
      "metadata": {
        "description": "SSH Key or password for the Virtual Machine"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "enableMonitoring": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable Azure Monitor integration with Log Analytics and Application Insights"
      }
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "defaultValue": "[concat(parameters('vmName'), '-law')]",
      "metadata": {
        "description": "Name of the Log Analytics workspace for monitoring"
      }
    },
    "logAnalyticsRetentionDays": {
      "type": "int",
      "defaultValue": 30,
      "minValue": 30,
      "maxValue": 730,
      "metadata": {
        "description": "Number of days to retain logs in Log Analytics workspace"
      }
    },
    "enableApplicationInsights": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable Application Insights for advanced monitoring and diagnostics"
      }
    },
    "alertEmailRecipients": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Email addresses to receive alert notifications"
      }
    },
    "enableMetricAlerts": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable metric-based alerts for CPU, memory, and disk"
      }
    },
    "cpuAlertThreshold": {
      "type": "int",
      "defaultValue": 80,
      "minValue": 1,
      "maxValue": 100,
      "metadata": {
        "description": "CPU percentage threshold for alerts (1-100)"
      }
    },
    "enableWorkbooks": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Azure Monitor Workbooks for enhanced visualization"
      }
    },
    "workbookTypes": {
      "type": "array",
      "defaultValue": [
        "performance",
        "security",
        "availability"
      ],
      "metadata": {
        "description": "Types of workbooks to deploy: performance, security, availability, cost"
      }
    },
    "enableCostOptimization": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable cost optimization features including right-sizing recommendations and budget alerts"
      }
    },
    "monthlyBudgetLimit": {
      "type": "int",
      "defaultValue": 500,
      "minValue": 0,
      "maxValue": 10000000,
      "metadata": {
        "description": "Monthly budget limit in USD for cost alerts (0 to disable budget alerts)"
      }
    },
    "budgetStartDate": {
      "type": "string",
      "defaultValue": "[concat(utcNow('yyyy-MM'), '-01')]",
      "metadata": {
        "description": "Budget start date (YYYY-MM-DD format)"
      }
    },
    "budgetAlertThreshold": {
      "type": "int",
      "defaultValue": 80,
      "minValue": 1,
      "maxValue": 100,
      "metadata": {
        "description": "Budget alert threshold percentage (1-100)"
      }
    },
    "enableRightSizing": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable automatic right-sizing recommendations based on usage patterns"
      }
    },
    "enablePerformanceOptimization": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable performance optimization features including autoscale and performance baselines"
      }
    },
    "enableAutoscale": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable autoscaling for the VM (requires VMSS deployment)"
      }
    },
    "autoscaleMinInstances": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 100,
      "metadata": {
        "description": "Minimum number of instances for autoscale"
      }
    },
    "autoscaleMaxInstances": {
      "type": "int",
      "defaultValue": 10,
      "minValue": 1,
      "maxValue": 1000,
      "metadata": {
        "description": "Maximum number of instances for autoscale"
      }
    },
    "autoscaleCpuThreshold": {
      "type": "int",
      "defaultValue": 75,
      "minValue": 1,
      "maxValue": 100,
      "metadata": {
        "description": "CPU percentage threshold to trigger scale-out (1-100)"
      }
    },
    "performanceProfile": {
      "type": "string",
      "defaultValue": "Balanced",
      "allowedValues": [
        "LowCost",
        "Balanced",
        "HighPerformance"
      ],
      "metadata": {
        "description": "Performance profile for VM configuration: LowCost (cost-optimized), Balanced (mixed), HighPerformance (performance-optimized)"
      }
    },
    "enableHighAvailability": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable high availability features including availability zones or availability sets"
      }
    },
    "availabilityOption": {
      "type": "string",
      "defaultValue": "None",
      "allowedValues": [
        "None",
        "AvailabilityZones",
        "AvailabilitySet",
        "VMSS"
      ],
      "metadata": {
        "description": "High availability option: None (single VM), AvailabilityZones (zone-redundant), AvailabilitySet (fault domain redundancy), VMSS (scale set for autoscale)"
      }
    },
    "availabilityZones": {
      "type": "array",
      "defaultValue": ["1", "2", "3"],
      "metadata": {
        "description": "Availability zones for zone-redundant deployment (e.g., ['1','2','3'])"
      }
    },
    "availabilitySetFaultDomains": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 1,
      "maxValue": 3,
      "metadata": {
        "description": "Number of fault domains for availability set (1-3)"
      }
    },
    "availabilitySetUpdateDomains": {
      "type": "int",
      "defaultValue": 5,
      "minValue": 1,
      "maxValue": 20,
      "metadata": {
        "description": "Number of update domains for availability set (1-20)"
      }
    },
    "enableDisasterRecovery": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable disaster recovery features including Azure Backup and Site Recovery"
      }
    },
    "enableBackup": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable Azure Backup for VM protection"
      }
    },
    "backupPolicyType": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard",
        "Enhanced"
      ],
      "metadata": {
        "description": "Backup policy type: Standard (daily backup), Enhanced (multiple backups per day)"
      }
    },
    "backupRetentionDays": {
      "type": "int",
      "defaultValue": 30,
      "minValue": 7,
      "maxValue": 9999,
      "metadata": {
        "description": "Number of days to retain backups (7-9999)"
      }
    },
    "backupFrequency": {
      "type": "string",
      "defaultValue": "Daily",
      "allowedValues": [
        "Daily",
        "Weekly"
      ],
      "metadata": {
        "description": "Backup frequency: Daily or Weekly"
      }
    },
    "backupTime": {
      "type": "string",
      "defaultValue": "02:00",
      "metadata": {
        "description": "Backup time in HH:MM format (24-hour clock)"
      }
    },
    "backupScheduleStart": {
      "type": "string",
      "defaultValue": "[utcNow('yyyy-MM-dd')]",
      "metadata": {
        "description": "Backup schedule start date (YYYY-MM-DD format)"
      }
    },
    "enableSiteRecovery": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Azure Site Recovery for cross-region disaster recovery"
      }
    },
    "recoveryRegion": {
      "type": "string",
      "defaultValue": "eastus2",
      "metadata": {
        "description": "Target region for disaster recovery replication"
      }
    }
  },
  "variables": {
    "nicName": "[concat(parameters('vmName'), '-nic')]",
    "addressPrefix": "10.0.0.0/16",
    "subnetName": "Subnet",
    "subnetPrefix": "10.0.0.0/24",
    "publicIPAddressName": "[concat(parameters('vmName'), '-pip')]",
    "virtualNetworkName": "[concat(parameters('vmName'), '-vnet')]",
    "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
    "networkSecurityGroupName": "[concat(parameters('vmName'), '-nsg')]",
    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
            "keyData": "[parameters('adminPasswordOrKey')]"
          }
        ]
      }
    },
    "applicationInsightsName": "[concat(parameters('vmName'), '-ai')]",
    "actionGroupName": "[concat(parameters('vmName'), '-ag')]",
    "diagnosticSettingsName": "[concat(parameters('vmName'), '-diag')]",
    "diagnosticSettingsConfig": {
      "metrics": [
        {
          "category": "AllMetrics",
          "enabled": true
        }
      ]
    },
    "costOptimizationConfig": {
      "budgetName": "[concat(parameters('vmName'), '-budget')]",
      "estimatedMonthlyCost": "[div(mul(730, 96), 1000)]",
      "costAllocationTags": {
        "CostCenter": "IT",
        "Environment": "Production",
        "ManagedBy": "Azure Marketplace"
      }
    },
    "performanceOptimizationConfig": {
      "autoscaleSettingsName": "[concat(parameters('vmName'), '-autoscale')]",
      "performanceBaseline": {
        "cpuBaseline": 30,
        "memoryBaseline": 40,
        "diskIOPSBaseline": 500,
        "networkThroughputBaseline": 100
      },
      "performanceProfile": {
        "LowCost": {
          "diskType": "Standard_LRS",
          "acceleratedNetworking": false,
          "priority": "Low"
        },
        "Balanced": {
          "diskType": "StandardSSD_LRS",
          "acceleratedNetworking": true,
          "priority": "Regular"
        },
        "HighPerformance": {
          "diskType": "Premium_LRS",
          "acceleratedNetworking": true,
          "priority": "Regular"
        }
      }
    },
    "highAvailabilityConfig": {
      "availabilitySetName": "[concat(parameters('vmName'), '-avset')]",
      "vmssName": "[concat(parameters('vmName'), '-vmss')]",
      "useZones": "[equals(parameters('availabilityOption'), 'AvailabilityZones')]",
      "useAvailabilitySet": "[equals(parameters('availabilityOption'), 'AvailabilitySet')]",
      "useVMSS": "[equals(parameters('availabilityOption'), 'VMSS')]"
    },
    "disasterRecoveryConfig": {
      "recoveryVaultName": "[concat(parameters('vmName'), '-rsv')]",
      "backupPolicyName": "[concat(parameters('vmName'), '-backup-policy')]",
      "backupFabricName": "Azure",
      "backupContainerName": "[concat('iaasvmcontainer;iaasvmcontainerv2;', resourceGroup().name, ';', parameters('vmName'))]",
      "backupItemName": "[concat('vm;iaasvmcontainerv2;', resourceGroup().name, ';', parameters('vmName'))]",
      "replicationPolicyName": "[concat(parameters('vmName'), '-replication-policy')]",
      "recoveryPointRetention": "[parameters('backupRetentionDays')]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2023-06-01",
      "name": "[variables('publicIPAddressName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2023-06-01",
      "name": "[variables('networkSecurityGroupName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "SSH",
            "properties": {
              "priority": 1000,
              "protocol": "Tcp",
              "access": "Allow",
              "direction": "Inbound",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "22"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2023-06-01",
      "name": "[variables('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2023-06-01",
      "name": "[variables('nicName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2023-09-01",
      "name": "[parameters('vmName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": {
          "imageReference": {"publisher":"Canonical","offer":"0001-com-ubuntu-server-jammy","sku":"22_04-lts-gen2","version":"latest"},
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
            }
          ]
        }
      }
    },
    {
      "condition": "[and(parameters('enableHighAvailability'), variables('highAvailabilityConfig').useAvailabilitySet)]",
      "type": "Microsoft.Compute/availabilitySets",
      "apiVersion": "2023-09-01",
      "name": "[variables('highAvailabilityConfig').availabilitySetName]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Aligned"
      },
      "properties": {
        "platformFaultDomainCount": "[parameters('availabilitySetFaultDomains')]",
        "platformUpdateDomainCount": "[parameters('availabilitySetUpdateDomains')]"
      },
      "tags": {
        "Purpose": "High Availability",
        "CreatedBy": "Azure Marketplace VM Plugin"
      }
    },
    {
      "condition": "[and(parameters('enableDisasterRecovery'), parameters('enableBackup'))]",
      "type": "Microsoft.RecoveryServices/vaults",
      "apiVersion": "2023-06-01",
      "name": "[variables('disasterRecoveryConfig').recoveryVaultName]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "RS0",
        "tier": "Standard"
      },
      "properties": {
        "publicNetworkAccess": "Enabled"
      },
      "tags": {
        "Purpose": "Backup and Disaster Recovery",
        "CreatedBy": "Azure Marketplace VM Plugin"
      }
    },
    {
      "condition": "[and(parameters('enableDisasterRecovery'), parameters('enableBackup'))]",
      "type": "Microsoft.RecoveryServices/vaults/backupPolicies",
      "apiVersion": "2023-06-01",
      "name": "[concat(variables('disasterRecoveryConfig').recoveryVaultName, '/', variables('disasterRecoveryConfig').backupPolicyName)]",
      "dependsOn": [
        "[resourceId('Microsoft.RecoveryServices/vaults', variables('disasterRecoveryConfig').recoveryVaultName)]"
      ],
      "properties": {
        "backupManagementType": "AzureIaasVM",
        "schedulePolicy": {
          "schedulePolicyType": "SimpleSchedulePolicy",
          "scheduleRunFrequency": "[parameters('backupFrequency')]",
          "scheduleRunTimes": [
            "[concat(parameters('backupScheduleStart'), 'T', parameters('backupTime'), ':00Z')]"
          ],
          "scheduleRunDays": "[if(equals(parameters('backupFrequency'), 'Weekly'), json('[\"Sunday\"]'), json('null'))]"
        },
        "retentionPolicy": {
          "retentionPolicyType": "LongTermRetentionPolicy",
          "dailySchedule": {
            "retentionTimes": [
              "[concat(parameters('backupScheduleStart'), 'T', parameters('backupTime'), ':00Z')]"
            ],
            "retentionDuration": {
              "count": "[parameters('backupRetentionDays')]",
              "durationType": "Days"
            }
          }
        },
        "instantRpRetentionRangeInDays": 2,
        "timeZone": "UTC",
        "protectedItemsCount": 0
      }
    },
    {
      "condition": "[and(parameters('enableDisasterRecovery'), parameters('enableBackup'))]",
      "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
      "apiVersion": "2023-06-01",
      "name": "[concat(variables('disasterRecoveryConfig').recoveryVaultName, '/', variables('disasterRecoveryConfig').backupFabricName, '/', variables('disasterRecoveryConfig').backupContainerName, '/', variables('disasterRecoveryConfig').backupItemName)]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
        "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', variables('disasterRecoveryConfig').recoveryVaultName, variables('disasterRecoveryConfig').backupPolicyName)]"
      ],
      "properties": {
        "protectedItemType": "Microsoft.Compute/virtualMachines",
        "policyId": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', variables('disasterRecoveryConfig').recoveryVaultName, variables('disasterRecoveryConfig').backupPolicyName)]",
        "sourceResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
      }
    },
    {
      "condition": "[and(parameters('enableCostOptimization'), greater(parameters('monthlyBudgetLimit'), 0))]",
      "type": "Microsoft.Consumption/budgets",
      "apiVersion": "2023-11-01",
      "name": "[variables('costOptimizationConfig').budgetName]",
      "properties": {
        "category": "Cost",
        "amount": "[parameters('monthlyBudgetLimit')]",
        "timeGrain": "Monthly",
        "timePeriod": {
          "startDate": "[parameters('budgetStartDate')]",
          "endDate": "[concat(string(add(int(substring(parameters('budgetStartDate'), 0, 4)), 5)), '-12-31')]"
        },
        "filter": {
          "dimensions": {
            "name": "ResourceGroupName",
            "operator": "In",
            "values": [
              "[resourceGroup().name]"
            ]
          }
        },
        "notifications": {
          "Actual_GreaterThan_80_Percent": {
            "enabled": true,
            "operator": "GreaterThan",
            "threshold": "[parameters('budgetAlertThreshold')]",
            "contactEmails": "[if(greater(length(parameters('alertEmailRecipients')), 0), parameters('alertEmailRecipients'), json('[]'))]",
            "contactRoles": [
              "Owner",
              "Contributor"
            ],
            "thresholdType": "Actual"
          },
          "Forecasted_GreaterThan_90_Percent": {
            "enabled": true,
            "operator": "GreaterThan",
            "threshold": 90,
            "contactEmails": "[if(greater(length(parameters('alertEmailRecipients')), 0), parameters('alertEmailRecipients'), json('[]'))]",
            "contactRoles": [
              "Owner",
              "Contributor"
            ],
            "thresholdType": "Forecasted"
          }
        }
      }
    },
    {
      "condition": "[and(parameters('enablePerformanceOptimization'), parameters('enableAutoscale'))]",
      "type": "Microsoft.Insights/autoscaleSettings",
      "apiVersion": "2022-10-01",
      "name": "[variables('performanceOptimizationConfig').autoscaleSettingsName]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
      ],
      "properties": {
        "name": "[variables('performanceOptimizationConfig').autoscaleSettingsName]",
        "targetResourceUri": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
        "enabled": true,
        "profiles": [
          {
            "name": "Auto scale condition",
            "capacity": {
              "minimum": "[string(parameters('autoscaleMinInstances'))]",
              "maximum": "[string(parameters('autoscaleMaxInstances'))]",
              "default": "[string(parameters('autoscaleMinInstances'))]"
            },
            "rules": [
              {
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT5M"
                },
                "metricTrigger": {
                  "metricName": "Percentage CPU",
                  "metricNamespace": "Microsoft.Compute/virtualMachines",
                  "metricResourceUri": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
                  "operator": "GreaterThan",
                  "statistic": "Average",
                  "threshold": "[parameters('autoscaleCpuThreshold')]",
                  "timeAggregation": "Average",
                  "timeGrain": "PT1M",
                  "timeWindow": "PT5M"
                }
              },
              {
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT5M"
                },
                "metricTrigger": {
                  "metricName": "Percentage CPU",
                  "metricNamespace": "Microsoft.Compute/virtualMachines",
                  "metricResourceUri": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
                  "operator": "LessThan",
                  "statistic": "Average",
                  "threshold": "[sub(parameters('autoscaleCpuThreshold'), 20)]",
                  "timeAggregation": "Average",
                  "timeGrain": "PT1M",
                  "timeWindow": "PT10M"
                }
              }
            ]
          }
        ],
        "notifications": [
          {
            "operation": "Scale",
            "email": {
              "sendToSubscriptionAdministrator": true,
              "sendToSubscriptionCoAdministrators": false,
              "customEmails": "[if(greater(length(parameters('alertEmailRecipients')), 0), parameters('alertEmailRecipients'), json('[]'))]"
            }
          }
        ]
      },
      "tags": {
        "Purpose": "Autoscale Configuration",
        "CreatedBy": "Azure Marketplace VM Plugin"
      }
    },
    {
      "condition": "[parameters('enableMonitoring')]",
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2022-10-01",
      "name": "[parameters('logAnalyticsWorkspaceName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": "[parameters('logAnalyticsRetentionDays')]",
        "features": {
          "enableLogAccessUsingOnlyResourcePermissions": true
        }
      },
      "tags": {
        "Purpose": "VM Monitoring",
        "CreatedBy": "Azure Marketplace VM Plugin"
      }
    },
    {
      "condition": "[and(parameters('enableMonitoring'), parameters('enableApplicationInsights'))]",
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('applicationInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ],
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      },
      "tags": {
        "Purpose": "VM Advanced Monitoring",
        "CreatedBy": "Azure Marketplace VM Plugin"
      }
    },
    {
      "condition": "[and(parameters('enableMonitoring'), parameters('enableMetricAlerts'), greater(length(parameters('alertEmailRecipients')), 0))]",
      "type": "Microsoft.Insights/actionGroups",
      "apiVersion": "2023-01-01",
      "name": "[variables('actionGroupName')]",
      "location": "Global",
      "properties": {
        "groupShortName": "[take(parameters('vmName'), 12)]",
        "enabled": true,
        "copy": [
          {
            "name": "emailReceivers",
            "count": "[length(parameters('alertEmailRecipients'))]",
            "input": {
              "name": "[concat('Email', copyIndex('emailReceivers'))]",
              "emailAddress": "[parameters('alertEmailRecipients')[copyIndex('emailReceivers')]]",
              "useCommonAlertSchema": true
            }
          }
        ]
      },
      "tags": {
        "Purpose": "Alert Notifications",
        "CreatedBy": "Azure Marketplace VM Plugin"
      }
    },
    {
      "condition": "[parameters('enableMonitoring')]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]",
      "name": "[variables('diagnosticSettingsName')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ],
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
        "metrics": "[variables('diagnosticSettingsConfig').metrics]"
      }
    },
    {
      "condition": "[and(parameters('enableMonitoring'), parameters('enableMetricAlerts'))]",
      "type": "Microsoft.Insights/metricAlerts",
      "apiVersion": "2018-03-01",
      "name": "[concat(parameters('vmName'), '-cpu-alert')]",
      "location": "global",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
        "[resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName'))]"
      ],
      "properties": {
        "description": "Alert when CPU exceeds threshold",
        "severity": 2,
        "enabled": true,
        "scopes": [
          "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
        ],
        "evaluationFrequency": "PT5M",
        "windowSize": "PT15M",
        "criteria": {
          "allOf": [
            {
              "threshold": "[parameters('cpuAlertThreshold')]",
              "name": "Metric1",
              "metricNamespace": "Microsoft.Compute/virtualMachines",
              "metricName": "Percentage CPU",
              "operator": "GreaterThan",
              "timeAggregation": "Average",
              "criterionType": "StaticThresholdCriterion"
            }
          ],
          "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
        },
        "autoMitigate": true,
        "actions": "[if(greater(length(parameters('alertEmailRecipients')), 0), json(concat('[{\"actionGroupId\":\"', resourceId('Microsoft.Insights/actionGroups', variables('actionGroupName')), '\"}]')), json('[]'))]"
      },
      "tags": {
        "AlertType": "CPU",
        "CreatedBy": "Azure Marketplace VM Plugin"
      }
    },
    {
      "condition": "[and(parameters('enableMonitoring'), parameters('enableWorkbooks'), contains(parameters('workbookTypes'), 'performance'))]",
      "type": "Microsoft.Insights/workbooks",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, 'performance-workbook')]",
      "location": "[parameters('location')]",
      "kind": "shared",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ],
      "properties": {
        "displayName": "[concat(parameters('vmName'), ' - Performance Analysis')]",
        "serializedData": "{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## VM Performance Dashboard\\n\\nMonitor CPU, Memory, Disk, and Network metrics.\"},\"name\":\"text-header\"},{\"type\":10,\"content\":{\"chartId\":\"workbook-perf\",\"version\":\"MetricsItem/2.0\",\"size\":0,\"chartType\":2,\"resourceIds\":[\"/subscriptions/{subscription}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/{vmName}\"],\"timeContext\":{\"durationMs\":3600000},\"metrics\":[{\"namespace\":\"Microsoft.Compute/virtualMachines\",\"metric\":\"Microsoft.Compute/virtualMachines--Percentage CPU\",\"aggregation\":4}]},\"name\":\"cpu-metrics\"}],\"fallbackResourceIds\":[\"/subscriptions/{subscription}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/{vmName}\"]}",
        "category": "Azure Monitor",
        "sourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      },
      "tags": {
        "WorkbookType": "Performance",
        "CreatedBy": "Azure Marketplace VM Plugin"
      }
    }
  ],
  "outputs": {
    "hostname": {
      "type": "string",
      "value": "[reference(variables('publicIPAddressName')).ipAddress]"
    },
    "sshCommand": {
      "type": "string",
      "value": "[concat('ssh ', parameters('adminUsername'), '@', reference(variables('publicIPAddressName')).ipAddress)]"
    },
    "logAnalyticsWorkspaceId": {
      "condition": "[parameters('enableMonitoring')]",
      "type": "string",
      "value": "[if(parameters('enableMonitoring'), resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')), '')]",
      "metadata": {
        "description": "Resource ID of the Log Analytics workspace"
      }
    },
    "logAnalyticsWorkspaceUrl": {
      "condition": "[parameters('enableMonitoring')]",
      "type": "string",
      "value": "[if(parameters('enableMonitoring'), uri(format('https://portal.azure.com/#@{0}/resource{1}', subscription().tenantId, resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))), '/Overview'), '')]",
      "metadata": {
        "description": "URL to Log Analytics workspace in Azure Portal"
      }
    },
    "applicationInsightsKey": {
      "condition": "[and(parameters('enableMonitoring'), parameters('enableApplicationInsights'))]",
      "type": "string",
      "value": "[if(and(parameters('enableMonitoring'), parameters('enableApplicationInsights')), reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).InstrumentationKey, '')]",
      "metadata": {
        "description": "Application Insights instrumentation key"
      }
    },
    "applicationInsightsConnectionString": {
      "condition": "[and(parameters('enableMonitoring'), parameters('enableApplicationInsights'))]",
      "type": "string",
      "value": "[if(and(parameters('enableMonitoring'), parameters('enableApplicationInsights')), reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).ConnectionString, '')]",
      "metadata": {
        "description": "Application Insights connection string"
      }
    },
    "monitoringStatus": {
      "type": "object",
      "value": {
        "monitoringEnabled": "[parameters('enableMonitoring')]",
        "applicationInsightsEnabled": "[parameters('enableApplicationInsights')]",
        "metricsAlertsEnabled": "[parameters('enableMetricAlerts')]",
        "workbooksDeployed": "[if(parameters('enableWorkbooks'), length(parameters('workbookTypes')), 0)]",
        "logRetentionDays": "[parameters('logAnalyticsRetentionDays')]"
      },
      "metadata": {
        "description": "Summary of monitoring configuration"
      }
    },
    "costAnalysis": {
      "condition": "[parameters('enableCostOptimization')]",
      "type": "object",
      "value": {
        "estimatedMonthlyCost": "[variables('costOptimizationConfig').estimatedMonthlyCost]",
        "vmSizeCost": "[parameters('vmSize')]",
        "budgetLimit": "[parameters('monthlyBudgetLimit')]",
        "budgetAlertThreshold": "[parameters('budgetAlertThreshold')]",
        "rightSizingEnabled": "[parameters('enableRightSizing')]",
        "costAllocationTags": "[variables('costOptimizationConfig').costAllocationTags]"
      },
      "metadata": {
        "description": "Cost analysis and optimization configuration"
      }
    },
    "performanceMetrics": {
      "condition": "[parameters('enablePerformanceOptimization')]",
      "type": "object",
      "value": {
        "performanceProfile": "[parameters('performanceProfile')]",
        "autoscaleEnabled": "[parameters('enableAutoscale')]",
        "autoscaleRange": "[if(parameters('enableAutoscale'), concat(string(parameters('autoscaleMinInstances')), '-', string(parameters('autoscaleMaxInstances'))), 'N/A')]",
        "performanceBaseline": "[variables('performanceOptimizationConfig').performanceBaseline]",
        "diskType": "[variables('performanceOptimizationConfig').performanceProfile[parameters('performanceProfile')].diskType]",
        "acceleratedNetworking": "[variables('performanceOptimizationConfig').performanceProfile[parameters('performanceProfile')].acceleratedNetworking]"
      },
      "metadata": {
        "description": "Performance optimization configuration and baselines"
      }
    },
    "optimizationStatus": {
      "type": "object",
      "value": {
        "costOptimizationEnabled": "[parameters('enableCostOptimization')]",
        "performanceOptimizationEnabled": "[parameters('enablePerformanceOptimization')]",
        "rightSizingEnabled": "[parameters('enableRightSizing')]",
        "autoscaleEnabled": "[parameters('enableAutoscale')]",
        "budgetAlertsConfigured": "[greater(parameters('monthlyBudgetLimit'), 0)]"
      },
      "metadata": {
        "description": "Summary of cost and performance optimization status"
      }
    },
    "highAvailabilityStatus": {
      "condition": "[parameters('enableHighAvailability')]",
      "type": "object",
      "value": {
        "highAvailabilityEnabled": "[parameters('enableHighAvailability')]",
        "availabilityOption": "[parameters('availabilityOption')]",
        "availabilityZones": "[if(variables('highAvailabilityConfig').useZones, parameters('availabilityZones'), json('[]'))]",
        "availabilitySetConfigured": "[variables('highAvailabilityConfig').useAvailabilitySet]",
        "vmssConfigured": "[variables('highAvailabilityConfig').useVMSS]",
        "faultDomains": "[if(variables('highAvailabilityConfig').useAvailabilitySet, parameters('availabilitySetFaultDomains'), 0)]",
        "updateDomains": "[if(variables('highAvailabilityConfig').useAvailabilitySet, parameters('availabilitySetUpdateDomains'), 0)]"
      },
      "metadata": {
        "description": "High availability configuration and status"
      }
    },
    "disasterRecoveryStatus": {
      "condition": "[parameters('enableDisasterRecovery')]",
      "type": "object",
      "value": {
        "disasterRecoveryEnabled": "[parameters('enableDisasterRecovery')]",
        "backupEnabled": "[parameters('enableBackup')]",
        "backupPolicyType": "[parameters('backupPolicyType')]",
        "backupFrequency": "[parameters('backupFrequency')]",
        "backupRetentionDays": "[parameters('backupRetentionDays')]",
        "backupTime": "[parameters('backupTime')]",
        "siteRecoveryEnabled": "[parameters('enableSiteRecovery')]",
        "recoveryRegion": "[if(parameters('enableSiteRecovery'), parameters('recoveryRegion'), '')]",
        "recoveryVaultId": "[if(parameters('enableBackup'), resourceId('Microsoft.RecoveryServices/vaults', variables('disasterRecoveryConfig').recoveryVaultName), '')]"
      },
      "metadata": {
        "description": "Disaster recovery configuration and backup status"
      }
    },
    "resilienceScore": {
      "type": "object",
      "value": {
        "highAvailabilityConfigured": "[parameters('enableHighAvailability')]",
        "backupConfigured": "[and(parameters('enableDisasterRecovery'), parameters('enableBackup'))]",
        "monitoringConfigured": "[parameters('enableMonitoring')]",
        "multiZoneDeployment": "[and(parameters('enableHighAvailability'), variables('highAvailabilityConfig').useZones)]",
        "crossRegionRecovery": "[and(parameters('enableDisasterRecovery'), parameters('enableSiteRecovery'))]",
        "resilienceTier": "[if(and(parameters('enableHighAvailability'), parameters('enableDisasterRecovery'), parameters('enableMonitoring')), 'Enterprise', if(or(parameters('enableHighAvailability'), parameters('enableDisasterRecovery')), 'Standard', 'Basic'))]"
      },
      "metadata": {
        "description": "Overall resilience configuration score and tier"
      }
    }
  }
}
