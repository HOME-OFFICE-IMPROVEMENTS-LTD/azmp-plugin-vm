{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "azmp-plugin-vm",
      "version": "1.6.0"
    },
    "description": "",
    "author": ""
  },
  "parameters": {
    "vmName": {
      "type": "string",
      "defaultValue": "azmp-test-vm",
      "metadata": {
        "description": "Name of the virtual machine"
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "azureadmin",
      "metadata": {
        "description": "Administrator username for the VM"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "eastus",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_B2s",
      "metadata": {
        "description": "Size of the virtual machine"
      }
    },
    "createLoadBalancer": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to create a load balancer"
      }
    },
    "createApplicationGateway": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to create an application gateway"
      }
    },
    "createBastion": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to create Azure Bastion"
      }
    },
    "bastionSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.1.0/27",
      "metadata": {
        "description": "Address prefix for the Azure Bastion subnet"
      }
    },
    "loadBalancingProtocol": {
      "type": "string",
      "defaultValue": "Tcp",
      "allowedValues": [
        "Tcp",
        "Udp"
      ],
      "metadata": {
        "description": "Load balancing rule protocol"
      }
    },
    "loadBalancingFrontendPort": {
      "type": "int",
      "defaultValue": 80,
      "metadata": {
        "description": "Load balancing rule frontend port"
      }
    },
    "loadBalancingBackendPort": {
      "type": "int",
      "defaultValue": 80,
      "metadata": {
        "description": "Load balancing rule backend port"
      }
    },
    "healthProbeProtocol": {
      "type": "string",
      "defaultValue": "Http",
      "allowedValues": [
        "Http",
        "Https",
        "Tcp"
      ],
      "metadata": {
        "description": "Health probe protocol"
      }
    },
    "healthProbePort": {
      "type": "int",
      "defaultValue": 80,
      "metadata": {
        "description": "Health probe port"
      }
    },
    "healthProbeInterval": {
      "type": "int",
      "defaultValue": 15,
      "metadata": {
        "description": "Health probe interval in seconds"
      }
    },
    "healthProbeRetries": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Health probe number of retries"
      }
    },
    "applicationGatewaySize": {
      "type": "string",
      "defaultValue": "Standard_Small",
      "allowedValues": [
        "Standard_Small",
        "Standard_Medium",
        "Standard_Large"
      ],
      "metadata": {
        "description": "Application Gateway size"
      }
    },
    "applicationGatewayCapacity": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 1,
      "maxValue": 10,
      "metadata": {
        "description": "Application Gateway instance count"
      }
    },
    "applicationGatewayPort": {
      "type": "int",
      "defaultValue": 80,
      "metadata": {
        "description": "Application Gateway frontend port"
      }
    },
    "applicationGatewayBackendPort": {
      "type": "int",
      "defaultValue": 80,
      "metadata": {
        "description": "Application Gateway backend port"
      }
    },
    "applicationGatewayProtocol": {
      "type": "string",
      "defaultValue": "Http",
      "allowedValues": [
        "Http",
        "Https"
      ],
      "metadata": {
        "description": "Application Gateway protocol"
      }
    },
    "publicIPAllocationMethod": {
      "type": "string",
      "defaultValue": "Dynamic",
      "allowedValues": [
        "Dynamic",
        "Static"
      ],
      "metadata": {
        "description": "Public IP allocation method"
      }
    },
    "publicIPSku": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "Standard"
      ],
      "metadata": {
        "description": "Public IP SKU"
      }
    },
    "dnsLabelPrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "DNS label prefix for the public IP"
      }
    },
    "virtualNetworkAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "Address prefix for the virtual network"
      }
    },
    "installExtensions": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to install VM extensions"
      }
    },
    "installCustomScriptExtension": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to install Custom Script Extension"
      }
    },
    "customScriptUrl": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "URL to the custom script to execute"
      }
    },
    "customScriptCommand": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Command to execute the custom script"
      }
    },
    "installMonitoringExtension": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to install Azure Monitor Agent"
      }
    },
    "workspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Log Analytics Workspace ID for monitoring"
      }
    },
    "workspaceKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Log Analytics Workspace Key for monitoring"
      }
    },
    "installSecurityExtension": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to install Azure Security Agent"
      }
    },
    "installAntimalwareExtension": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to install Windows Antimalware Extension (Windows only)"
      }
    },
    "antimalwareExclusions": {
      "type": "object",
      "defaultValue": {
        "Paths": [],
        "Extensions": [],
        "Processes": []
      },
      "metadata": {
        "description": "Antimalware exclusion settings"
      }
    },
    "enableManagedIdentity": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to enable system-assigned managed identity"
      }
    },
    "userAssignedIdentities": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "List of user-assigned managed identity resource IDs"
      }
    },
    "createAvailabilitySet": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to create an Availability Set for high availability"
      }
    },
    "availabilitySetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Availability Set (auto-generated if empty)"
      }
    },
    "platformFaultDomainCount": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 1,
      "maxValue": 3,
      "metadata": {
        "description": "Number of fault domains for the Availability Set"
      }
    },
    "platformUpdateDomainCount": {
      "type": "int",
      "defaultValue": 5,
      "minValue": 1,
      "maxValue": 20,
      "metadata": {
        "description": "Number of update domains for the Availability Set"
      }
    },
    "useAvailabilityZones": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to deploy VM in Availability Zones. Cannot be used with createAvailabilitySet=true (mutually exclusive)"
      }
    },
    "availabilityZone": {
      "type": "string",
      "defaultValue": "1",
      "allowedValues": ["1", "2", "3"],
      "metadata": {
        "description": "Availability Zone for the VM (1, 2, or 3)"
      }
    },
    "enableBackup": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to enable Azure Backup for the VM"
      }
    },
    "backupVaultName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Recovery Services Vault for backup (auto-generated if empty)"
      }
    },
    "backupPolicyName": {
      "type": "string",
      "defaultValue": "DefaultPolicy",
      "metadata": {
        "description": "Name of the backup policy to use"
      }
    },
    "dailyRetentionDays": {
      "type": "int",
      "defaultValue": 30,
      "minValue": 7,
      "maxValue": 9999,
      "metadata": {
        "description": "Number of days to retain daily backups"
      }
    },
    "backupScheduleTime": {
      "type": "string",
      "defaultValue": "02:00",
      "metadata": {
        "description": "Time for daily backup schedule (HH:mm format)"
      }
    },
    "enableSnapshot": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to enable disk snapshots for the VM"
      }
    },
    "snapshotRetentionDays": {
      "type": "int",
      "defaultValue": 7,
      "minValue": 1,
      "maxValue": 365,
      "metadata": {
        "description": "Number of days to retain disk snapshots"
      }
    },
    "createVmss": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to create a Virtual Machine Scale Set instead of a single VM"
      }
    },
    "vmssName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Virtual Machine Scale Set"
      }
    },
    "vmssInstanceCount": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 1,
      "maxValue": 100,
      "metadata": {
        "description": "Number of instances in the VMSS"
      }
    },
    "vmssOrchestrationMode": {
      "type": "string",
      "defaultValue": "Uniform",
      "allowedValues": [
        "Uniform",
        "Flexible"
      ],
      "metadata": {
        "description": "VMSS orchestration mode"
      }
    },
    "vmssUpgradeMode": {
      "type": "string",
      "defaultValue": "Manual",
      "allowedValues": [
        "Manual",
        "Automatic",
        "Rolling"
      ],
      "metadata": {
        "description": "VMSS upgrade policy mode"
      }
    },
    "enableAutoScaling": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to enable auto-scaling for the VMSS"
      }
    },
    "autoScaleMin": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 1,
      "maxValue": 50,
      "metadata": {
        "description": "Minimum number of instances in auto-scaling"
      }
    },
    "autoScaleMax": {
      "type": "int",
      "defaultValue": 10,
      "minValue": 2,
      "maxValue": 100,
      "metadata": {
        "description": "Maximum number of instances in auto-scaling"
      }
    },
    "autoScaleDefault": {
      "type": "int",
      "defaultValue": 3,
      "minValue": 1,
      "maxValue": 50,
      "metadata": {
        "description": "Default number of instances in auto-scaling"
      }
    },
    "cpuScaleOutThreshold": {
      "type": "int",
      "defaultValue": 75,
      "minValue": 1,
      "maxValue": 100,
      "metadata": {
        "description": "CPU percentage threshold for scaling out"
      }
    },
    "cpuScaleInThreshold": {
      "type": "int",
      "defaultValue": 25,
      "minValue": 1,
      "maxValue": 100,
      "metadata": {
        "description": "CPU percentage threshold for scaling in"
      }
    },
    "enableMultiRegion": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to enable multi-region deployment with Traffic Manager"
      }
    },
    "trafficManagerProfileName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Traffic Manager profile"
      }
    },
    "trafficManagerDnsName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "DNS name for the Traffic Manager profile"
      }
    },
    "trafficRoutingMethod": {
      "type": "string",
      "defaultValue": "Priority",
      "allowedValues": [
        "Priority",
        "Performance",
        "Geographic",
        "Weighted"
      ],
      "metadata": {
        "description": "Traffic Manager routing method"
      }
    }
  },
  "variables": {
    "vmName": "[parameters('vmName')]",
    "backendPoolName": "[concat(variables('loadBalancerName'), '-backend')]",
    "loadBalancingRuleName": "[concat(variables('loadBalancerName'), '-rule')]",
    "healthProbeName": "[concat(variables('loadBalancerName'), '-probe')]",
    "bastionHostName": "[concat(parameters('vmName'), '-bastion')]",
    "bastionSubnetName": "AzureBastionSubnet",
    "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
    "extensionPublisher": "[if(equals(parameters('osType'), 'Windows'), 'Microsoft.Compute', 'Microsoft.Azure.Extensions')]",
    "customScriptExtensionName": "[if(equals(parameters('osType'), 'Windows'), 'CustomScriptExtension', 'CustomScript')]",
    "monitoringExtensionName": "[if(equals(parameters('osType'), 'Windows'), 'MicrosoftMonitoringAgent', 'OmsAgentForLinux')]",
    "securityExtensionName": "[if(equals(parameters('osType'), 'Windows'), 'IaaSAntimalware', 'LinuxDiagnostic')]",
    "antimalwareExtensionName": "IaaSAntimalware",
    "azureMonitorExtensionName": "AzureMonitorWindowsAgent",
    "extensionApiVersion": "2021-03-01",
    "managedIdentityType": "[if(empty(parameters('userAssignedIdentities')), 'SystemAssigned', 'SystemAssigned,UserAssigned')]",
    "userAssignedIdentityConfig": "[if(empty(parameters('userAssignedIdentities')), json('{}'), json(concat('{\"', string(parameters('userAssignedIdentities')[0]), '\": {}}')))]",
    "customScriptFileUris": "[if(empty(parameters('customScriptUrl')), json('[]'), array(parameters('customScriptUrl')))]",
    "availabilitySetName": "[if(empty(parameters('availabilitySetName')), concat(parameters('vmName'), '-avset'), parameters('availabilitySetName'))]",
    "backupVaultName": "[if(empty(parameters('backupVaultName')), concat(parameters('vmName'), '-vault'), parameters('backupVaultName'))]",
    "backupPolicyName": "[if(equals(parameters('backupPolicyName'), 'DefaultPolicy'), concat('policy-', parameters('vmName')), parameters('backupPolicyName'))]",
    "snapshotName": "[concat(parameters('vmName'), '-snapshot')]",
    "backupScheduleTimestamp": "[concat('2025-01-01T', parameters('backupScheduleTime'), ':00Z')]",
    "vmssName": "[if(empty(parameters('vmssName')), concat(parameters('vmName'), '-vmss'), parameters('vmssName'))]",
    "autoScaleName": "[concat(variables('vmssName'), '-autoscale')]",
    "trafficManagerProfileName": "[if(empty(parameters('trafficManagerProfileName')), concat(parameters('vmName'), '-tm'), parameters('trafficManagerProfileName'))]",
    "trafficManagerDnsName": "[if(empty(parameters('trafficManagerDnsName')), concat(parameters('vmName'), '-', take(replace(guid(), '-', ''), 6)), parameters('trafficManagerDnsName'))]",
    "vmssTargetResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', variables('vmssName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2021-02-01",
      "name": "[variables('networkInterfaceName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.RecoveryServices/vaults",
      "apiVersion": "2023-06-01",
      "name": "[variables('backupVaultName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "RS0",
        "tier": "Standard"
      },
      "properties": {
        "publicNetworkAccess": "Enabled",
        "restoreSettings": {
          "crossRegionRestoreFlag": false
        },
        "securitySettings": {
          "immutabilitySettings": {
            "state": "Unlocked"
          }
        }
      }
    },
    {
      "type": "Microsoft.RecoveryServices/vaults/backupPolicies",
      "apiVersion": "2023-06-01",
      "name": "[concat(variables('backupVaultName'), '/', variables('backupPolicyName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.RecoveryServices/vaults', variables('backupVaultName'))]"
      ],
      "properties": {
        "backupManagementType": "AzureIaasVM",
        "schedulePolicy": {
          "schedulePolicyType": "SimpleSchedulePolicy",
          "scheduleRunFrequency": "Daily",
          "scheduleRunTimes": [
            "[variables('backupScheduleTimestamp')]"
          ],
          "scheduleWeeklyFrequency": 0
        },
        "retentionPolicy": {
          "retentionPolicyType": "LongTermRetentionPolicy",
          "dailySchedule": {
            "retentionTimes": [
              "[variables('backupScheduleTimestamp')]"
            ],
            "retentionDuration": {
              "count": "[parameters('dailyRetentionDays')]",
              "durationType": "Days"
            }
          }
        },
        "instantRpRetentionRangeInDays": 2,
        "timeZone": "UTC"
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2021-03-01",
      "name": "[variables('vmName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]"        },
        "storageProfile": {
          "imageReference": "[parameters('osImageReference')]",
          "osDisk": {
            "name": "[variables('osDiskName')]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[parameters('storageAccountType')]"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
      "apiVersion": "2023-06-01",
      "name": "[concat(variables('backupVaultName'), '/Azure/iaasvmcontainer;iaasvmcontainerv2;', resourceGroup().name, ';', variables('vmName'), '/vm;iaasvmcontainerv2;', resourceGroup().name, ';', variables('vmName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]",
        "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', variables('backupVaultName'), variables('backupPolicyName'))]"
      ],
      "properties": {
        "protectedItemType": "Microsoft.Compute/virtualMachines",
        "policyId": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', variables('backupVaultName'), variables('backupPolicyName'))]",
        "sourceResourceId": "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
      }
    }  ],
  "outputs": {
    "vmName": {
      "type": "string",
      "value": "[variables('vmName')]"
    },
    "adminUsername": {
      "type": "string", 
      "value": "[parameters('adminUsername')]"
    },
    "extensionsInstalled": {
      "type": "array",
      "value": "[if(parameters('installExtensions'), union(if(parameters('installCustomScriptExtension'), array('CustomScript'), createArray()), if(parameters('installMonitoringExtension'), array('MonitoringAgent'), createArray()), if(parameters('installSecurityExtension'), array('SecurityAgent'), createArray()), if(and(parameters('installAntimalwareExtension'), equals(parameters('osType'), 'Windows')), array('Antimalware'), createArray())), createArray())]"
    },
    "vmResourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
    },
    "backupVaultId": {
      "type": "string",
      "value": "[resourceId('Microsoft.RecoveryServices/vaults', variables('backupVaultName'))]"
    },
    "backupPolicyId": {
      "type": "string",
      "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', variables('backupVaultName'), variables('backupPolicyName'))]"
    }
  }
}