{{!-- Load Balancer ARM Template Partial --}}
{{!-- Provides public or internal load balancer with health probes and backend pools --}}

{{#if haConfig.loadBalancer.enabled}}
{{#if haConfig.loadBalancer.type}}
  {{#equal haConfig.loadBalancer.type "public"}}
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2023-04-01",
      "name": "[variables('publicIPName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "{{#equal haConfig.loadBalancer.sku 'Standard'}}Standard{{else}}Basic{{/equal}}",
        "tier": "Regional"
      },
      "properties": {
        "publicIPAllocationMethod": "{{#equal haConfig.loadBalancer.sku 'Standard'}}Static{{else}}Dynamic{{/equal}}",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('vmName'), '-lb-', uniqueString(resourceGroup().id))]"
        }
      }{{#if haConfig.availabilityZones}},
      "zones": {{{json haConfig.availabilityZones}}}{{/if}},
      "tags": "[parameters('tags')]"
    },
  {{/equal}}
  {
    "type": "Microsoft.Network/loadBalancers",
    "apiVersion": "2023-04-01",
    "name": "[variables('loadBalancerName')]",
    "location": "[parameters('location')]",
    {{#equal haConfig.loadBalancer.type "public"}}
    "dependsOn": [
      "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPName'))]"
    ],
    {{/equal}}
    "sku": {
      "name": "{{haConfig.loadBalancer.sku}}",
      "tier": "Regional"
    },
    "properties": {
      "frontendIPConfigurations": [
        {
          "name": "LoadBalancerFrontEnd",
          "properties": {
            {{#equal haConfig.loadBalancer.type "public"}}
            "publicIPAddress": {
              "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPName'))]"
            }
            {{else}}
            "subnet": {
              "id": "[variables('subnetRef')]"
            }{{#if haConfig.loadBalancer.frontend.privateIpAddress}},
            "privateIPAddress": "{{haConfig.loadBalancer.frontend.privateIpAddress}}",
            "privateIPAllocationMethod": "Static"
            {{else}},
            "privateIPAllocationMethod": "Dynamic"
            {{/if}}
            {{/equal}}
          }
        }
      ],
      "backendAddressPools": [
        {{#each haConfig.loadBalancer.backendPools}}
        {
          "name": "{{this.name}}",
          "properties": {}
        }{{#unless @last}},{{/unless}}
        {{/each}}
      ],
      "probes": [
        {{#each haConfig.loadBalancer.healthProbes}}
        {
          "name": "{{this.name}}",
          "properties": {
            "protocol": "{{this.protocol}}",
            "port": {{this.port}},
            {{#if this.path}}
            "requestPath": "{{this.path}}",
            {{/if}}
            "intervalInSeconds": {{default this.intervalInSeconds 15}},
            "numberOfProbes": {{default this.numberOfProbes 2}}{{#if this.timeoutInSeconds}},
            "timeoutInSeconds": {{this.timeoutInSeconds}}{{/if}}
          }
        }{{#unless @last}},{{/unless}}
        {{/each}}
      ],
      "loadBalancingRules": [
        {{#each haConfig.loadBalancer.loadBalancingRules}}
        {
          "name": "{{this.name}}",
          "properties": {
            "frontendIPConfiguration": {
              "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerName'), 'LoadBalancerFrontEnd')]"
            },
            "backendAddressPool": {
              "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerName'), '{{this.backendPoolName}}')]"
            },
            "probe": {
              "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerName'), '{{this.healthProbeName}}')]"
            },
            "protocol": "{{this.protocol}}",
            "frontendPort": {{this.frontendPort}},
            "backendPort": {{this.backendPort}},
            "enableFloatingIP": {{default this.enableFloatingIP false}},
            "idleTimeoutInMinutes": {{default this.idleTimeoutInMinutes 4}}{{#if this.enableTcpReset}}{{#equal ../haConfig.loadBalancer.sku 'Standard'}},
            "enableTcpReset": true{{/equal}}{{/if}}
          }
        }{{#unless @last}},{{/unless}}
        {{/each}}
      ]{{#if haConfig.loadBalancer.natRules}},
      "inboundNatRules": [
        {{#each haConfig.loadBalancer.natRules}}
        {
          "name": "{{this.name}}",
          "properties": {
            "frontendIPConfiguration": {
              "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerName'), 'LoadBalancerFrontEnd')]"
            },
            "protocol": "{{this.protocol}}",
            "frontendPort": {{this.frontendPort}},
            "backendPort": {{this.backendPort}}
          }
        }{{#unless @last}},{{/unless}}
        {{/each}}
      ]{{/if}}
    }{{#if haConfig.availabilityZones}},
    "zones": {{{json haConfig.availabilityZones}}}{{/if}},
    "tags": "[parameters('tags')]"
  }
{{/if}}
{{/if}}